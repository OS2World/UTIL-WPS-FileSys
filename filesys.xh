
/*
 * This file was generated by the SOM Compiler.
 * FileName: filesys.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

#ifndef SOM_WPFileSystemFix_xh
#define SOM_WPFileSystemFix_xh

class WPFileSystemFix;

#define WPFileSystemFix_MajorVersion 1
#define WPFileSystemFix_MinorVersion 1

/*
 * Passthru lines: File: "C.xh", "before"
 */

#define INCL_PM
#define INCL_BASE
#define INCL_DOSDEVIOCTL
#include <os2.h>


/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPFileSystem_xh
#include <wpfsys.xh>
#endif

#ifndef WPFileSystemFix_API
#define WPFileSystemFix_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPFileSystem;
class M_WPFileSystemFix;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPFileSystemFix Class */
class M_WPFileSystemFix;
SOMEXTERN M_WPFileSystemFix * SOMLINK WPFileSystemFixNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPFileSystemFix class object, and the methods it introduces. */
SOMEXTERN struct WPFileSystemFixClassDataStructure {
	M_WPFileSystemFix *classObject;
	BOOL *fIsInitialized;
	somMToken _get_fIsInitialized;
	somMToken _set_fIsInitialized;
} SOMDLINK WPFileSystemFixClassData;
#define _WPFileSystemFix WPFileSystemFixClassData.classObject

/* The API to parentMtabs for WPFileSystemFix, and the instance data it introduces. */
SOMEXTERN struct WPFileSystemFixCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPFileSystemFixCClassData;

/*
 * -- Typedefs for WPFileSystemFix Method Procedures
 */
SOMEXTERN {
typedef BOOL   SOMLINK somTP_WPFileSystemFix__get_fIsInitialized(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix__get_fIsInitialized *somTD_WPFileSystemFix__get_fIsInitialized;
typedef void   SOMLINK somTP_WPFileSystemFix__set_fIsInitialized(WPFileSystemFix *somSelf, 
		BOOL fIsInitialized);
typedef somTP_WPFileSystemFix__set_fIsInitialized *somTD_WPFileSystemFix__set_fIsInitialized;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpSetRealName(WPFileSystemFix *somSelf, 
		PSZ pszName);
typedef somTP_WPFileSystemFix_wpSetRealName *somTD_WPFileSystemFix_wpSetRealName;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpSetType(WPFileSystemFix *somSelf, 
		PSZ pszTypes, 
		PFEA2LIST pfeal);
typedef somTP_WPFileSystemFix_wpSetType *somTD_WPFileSystemFix_wpSetType;
typedef PSZ   SOMLINK somTP_WPFileSystemFix_wpQueryType(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpQueryType *somTD_WPFileSystemFix_wpQueryType;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpSetAttr(WPFileSystemFix *somSelf, 
		ULONG attrFile);
typedef somTP_WPFileSystemFix_wpSetAttr *somTD_WPFileSystemFix_wpSetAttr;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpQueryAttr(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpQueryAttr *somTD_WPFileSystemFix_wpQueryAttr;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpAddFile1Page(WPFileSystemFix *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPFileSystemFix_wpAddFile1Page *somTD_WPFileSystemFix_wpAddFile1Page;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpAddFile2Page(WPFileSystemFix *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPFileSystemFix_wpAddFile2Page *somTD_WPFileSystemFix_wpAddFile2Page;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpAddFile3Page(WPFileSystemFix *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPFileSystemFix_wpAddFile3Page *somTD_WPFileSystemFix_wpAddFile3Page;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpAddFileMenuPage(WPFileSystemFix *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPFileSystemFix_wpAddFileMenuPage *somTD_WPFileSystemFix_wpAddFileMenuPage;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpQueryCreation(WPFileSystemFix *somSelf, 
		FDATE* fdate, 
		FTIME* ftime);
typedef somTP_WPFileSystemFix_wpQueryCreation *somTD_WPFileSystemFix_wpQueryCreation;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpQueryLastAccess(WPFileSystemFix *somSelf, 
		FDATE* fdate, 
		FTIME* ftime);
typedef somTP_WPFileSystemFix_wpQueryLastAccess *somTD_WPFileSystemFix_wpQueryLastAccess;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpQueryLastWrite(WPFileSystemFix *somSelf, 
		FDATE* fdate, 
		FTIME* ftime);
typedef somTP_WPFileSystemFix_wpQueryLastWrite *somTD_WPFileSystemFix_wpQueryLastWrite;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpQueryFileSize(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpQueryFileSize *somTD_WPFileSystemFix_wpQueryFileSize;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpQueryEASize(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpQueryEASize *somTD_WPFileSystemFix_wpQueryEASize;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpSetDateInfo(WPFileSystemFix *somSelf, 
		FILEFINDBUF4* pstFileFindBuf);
typedef somTP_WPFileSystemFix_wpSetDateInfo *somTD_WPFileSystemFix_wpSetDateInfo;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpSetFileSizeInfo(WPFileSystemFix *somSelf, 
		ULONG cbFileSize, 
		ULONG cbEASize);
typedef somTP_WPFileSystemFix_wpSetFileSizeInfo *somTD_WPFileSystemFix_wpSetFileSizeInfo;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpRefresh(WPFileSystemFix *somSelf, 
		ULONG ulView, 
		PVOID pReserved);
typedef somTP_WPFileSystemFix_wpRefresh *somTD_WPFileSystemFix_wpRefresh;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpQueryRefreshFlags(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpQueryRefreshFlags *somTD_WPFileSystemFix_wpQueryRefreshFlags;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpSetRefreshFlags(WPFileSystemFix *somSelf, 
		ULONG ulRefreshFlags);
typedef somTP_WPFileSystemFix_wpSetRefreshFlags *somTD_WPFileSystemFix_wpSetRefreshFlags;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpPrintPlainTextFile(WPFileSystemFix *somSelf, 
		PPRINTDEST pPrintDest);
typedef somTP_WPFileSystemFix_wpPrintPlainTextFile *somTD_WPFileSystemFix_wpPrintPlainTextFile;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpSetTitleAndRenameFile(WPFileSystemFix *somSelf, 
		PSZ pszNewTitle, 
		ULONG fConfirmations);
typedef somTP_WPFileSystemFix_wpSetTitleAndRenameFile *somTD_WPFileSystemFix_wpSetTitleAndRenameFile;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpConfirmRenameFileWithExt(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpConfirmRenameFileWithExt *somTD_WPFileSystemFix_wpConfirmRenameFileWithExt;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpVerifyUpdateAccess(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpVerifyUpdateAccess *somTD_WPFileSystemFix_wpVerifyUpdateAccess;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpQueryEASupport(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpQueryEASupport *somTD_WPFileSystemFix_wpQueryEASupport;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpAddUserItemsToPopupMenu(WPFileSystemFix *somSelf, 
		HWND hwndMenu, 
		HWND hwndCnr, 
		ULONG iPosition);
typedef somTP_WPFileSystemFix_wpAddUserItemsToPopupMenu *somTD_WPFileSystemFix_wpAddUserItemsToPopupMenu;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpIsDiskSwapped(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpIsDiskSwapped *somTD_WPFileSystemFix_wpIsDiskSwapped;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpQueryRealName(WPFileSystemFix *somSelf, 
		PSZ pszFilename, 
		PULONG pcb, 
		BOOL fQualified);
typedef somTP_WPFileSystemFix_wpQueryRealName *somTD_WPFileSystemFix_wpQueryRealName;
typedef PSZ   SOMLINK somTP_WPFileSystemFix_wpQueryFilename(WPFileSystemFix *somSelf, 
		PSZ pszFilename, 
		BOOL fQualified);
typedef somTP_WPFileSystemFix_wpQueryFilename *somTD_WPFileSystemFix_wpQueryFilename;
typedef WPFileSystem*   SOMLINK somTP_WPFileSystemFix_wpQueryDisk(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpQueryDisk *somTD_WPFileSystemFix_wpQueryDisk;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpQueryDateInfo(WPFileSystemFix *somSelf, 
		FILEFINDBUF4* pstFileFindBuf);
typedef somTP_WPFileSystemFix_wpQueryDateInfo *somTD_WPFileSystemFix_wpQueryDateInfo;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpConfirmKeepAssoc(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpConfirmKeepAssoc *somTD_WPFileSystemFix_wpConfirmKeepAssoc;
typedef void   SOMLINK somTP_WPFileSystemFix_wpQueryFileSizeL(WPFileSystemFix *somSelf, 
		PLONGLONG pllFileSize);
typedef somTP_WPFileSystemFix_wpQueryFileSizeL *somTD_WPFileSystemFix_wpQueryFileSizeL;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpSetFileSizeL(WPFileSystemFix *somSelf, 
		PLONGLONG pllFileSize);
typedef somTP_WPFileSystemFix_wpSetFileSizeL *somTD_WPFileSystemFix_wpSetFileSizeL;
typedef void   SOMLINK somTP_WPFileSystemFix_wpUnInitData(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpUnInitData *somTD_WPFileSystemFix_wpUnInitData;
typedef HOBJECT   SOMLINK somTP_WPFileSystemFix_wpQueryHandle(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpQueryHandle *somTD_WPFileSystemFix_wpQueryHandle;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpSaveImmediate(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpSaveImmediate *somTD_WPFileSystemFix_wpSaveImmediate;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpSetTitle(WPFileSystemFix *somSelf, 
		PSZ pszNewTitle);
typedef somTP_WPFileSystemFix_wpSetTitle *somTD_WPFileSystemFix_wpSetTitle;
typedef HWND   SOMLINK somTP_WPFileSystemFix_wpViewObject(WPFileSystemFix *somSelf, 
		HWND hwndCnr, 
		ULONG ulView, 
		ULONG param);
typedef somTP_WPFileSystemFix_wpViewObject *somTD_WPFileSystemFix_wpViewObject;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpSwitchTo(WPFileSystemFix *somSelf, 
		ULONG View);
typedef somTP_WPFileSystemFix_wpSwitchTo *somTD_WPFileSystemFix_wpSwitchTo;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpAddSettingsPages(WPFileSystemFix *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPFileSystemFix_wpAddSettingsPages *somTD_WPFileSystemFix_wpAddSettingsPages;
typedef WPObject*   SOMLINK somTP_WPFileSystemFix_wpCopyObject(WPFileSystemFix *somSelf, 
		WPFolder* Folder, 
		BOOL fLock);
typedef somTP_WPFileSystemFix_wpCopyObject *somTD_WPFileSystemFix_wpCopyObject;
typedef WPObject*   SOMLINK somTP_WPFileSystemFix_wpCreateFromTemplate(WPFileSystemFix *somSelf, 
		WPFolder* folder, 
		BOOL fLock);
typedef somTP_WPFileSystemFix_wpCreateFromTemplate *somTD_WPFileSystemFix_wpCreateFromTemplate;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpMoveObject(WPFileSystemFix *somSelf, 
		WPFolder* Folder);
typedef somTP_WPFileSystemFix_wpMoveObject *somTD_WPFileSystemFix_wpMoveObject;
typedef HPOINTER   SOMLINK somTP_WPFileSystemFix_wpQueryIcon(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpQueryIcon *somTD_WPFileSystemFix_wpQueryIcon;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpQueryIconData(WPFileSystemFix *somSelf, 
		PICONINFO pIconInfo);
typedef somTP_WPFileSystemFix_wpQueryIconData *somTD_WPFileSystemFix_wpQueryIconData;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpSetIconData(WPFileSystemFix *somSelf, 
		PICONINFO pIconInfo);
typedef somTP_WPFileSystemFix_wpSetIconData *somTD_WPFileSystemFix_wpSetIconData;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpQueryDetailsData(WPFileSystemFix *somSelf, 
		PVOID* ppDetailsData, 
		PULONG pcp);
typedef somTP_WPFileSystemFix_wpQueryDetailsData *somTD_WPFileSystemFix_wpQueryDetailsData;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpSaveState(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpSaveState *somTD_WPFileSystemFix_wpSaveState;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpRestoreState(WPFileSystemFix *somSelf, 
		ULONG ulReserved);
typedef somTP_WPFileSystemFix_wpRestoreState *somTD_WPFileSystemFix_wpRestoreState;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpMenuItemSelected(WPFileSystemFix *somSelf, 
		HWND hwndFrame, 
		ULONG ulMenuId);
typedef somTP_WPFileSystemFix_wpMenuItemSelected *somTD_WPFileSystemFix_wpMenuItemSelected;
typedef HWND   SOMLINK somTP_WPFileSystemFix_wpOpen(WPFileSystemFix *somSelf, 
		HWND hwndCnr, 
		ULONG ulView, 
		ULONG param);
typedef somTP_WPFileSystemFix_wpOpen *somTD_WPFileSystemFix_wpOpen;
typedef MRESULT   SOMLINK somTP_WPFileSystemFix_wpDraggedOverObject(WPFileSystemFix *somSelf, 
		WPObject* DraggedOverObject);
typedef somTP_WPFileSystemFix_wpDraggedOverObject *somTD_WPFileSystemFix_wpDraggedOverObject;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpDroppedOnObject(WPFileSystemFix *somSelf, 
		WPObject* DroppedOnObject);
typedef somTP_WPFileSystemFix_wpDroppedOnObject *somTD_WPFileSystemFix_wpDroppedOnObject;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpFormatDragItem(WPFileSystemFix *somSelf, 
		PDRAGITEM pdrgItem);
typedef somTP_WPFileSystemFix_wpFormatDragItem *somTD_WPFileSystemFix_wpFormatDragItem;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpQueryNameClashOptions(WPFileSystemFix *somSelf, 
		ULONG menuID);
typedef somTP_WPFileSystemFix_wpQueryNameClashOptions *somTD_WPFileSystemFix_wpQueryNameClashOptions;
typedef BOOL32   SOMLINK somTP_WPFileSystemFix_wpAppendObject(WPFileSystemFix *somSelf, 
		WPObject* targetObject, 
		BOOL32 fMove);
typedef somTP_WPFileSystemFix_wpAppendObject *somTD_WPFileSystemFix_wpAppendObject;
typedef BOOL32   SOMLINK somTP_WPFileSystemFix_wpReplaceObject(WPFileSystemFix *somSelf, 
		WPObject* targetObject, 
		BOOL32 fMove);
typedef somTP_WPFileSystemFix_wpReplaceObject *somTD_WPFileSystemFix_wpReplaceObject;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpQueryStyle(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpQueryStyle *somTD_WPFileSystemFix_wpQueryStyle;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpModifyMenu(WPFileSystemFix *somSelf, 
		HWND hwndMenu, 
		HWND hwndCnr, 
		ULONG iPosition, 
		ULONG ulMenuType, 
		ULONG ulView, 
		ULONG ulReserved);
typedef somTP_WPFileSystemFix_wpModifyMenu *somTD_WPFileSystemFix_wpModifyMenu;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpFilterMenu(WPFileSystemFix *somSelf, 
		FILTERFLAGS* pFlags, 
		HWND hwndCnr, 
		BOOL fMultiSelect, 
		ULONG ulMenuType, 
		ULONG ulView, 
		ULONG ulReserved);
typedef somTP_WPFileSystemFix_wpFilterMenu *somTD_WPFileSystemFix_wpFilterMenu;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpDoesObjectMatch(WPFileSystemFix *somSelf, 
		PVOID pvoidExtendedCriteria);
typedef somTP_WPFileSystemFix_wpDoesObjectMatch *somTD_WPFileSystemFix_wpDoesObjectMatch;
typedef void   SOMLINK somTP_WPFileSystemFix_somDefaultInit(WPFileSystemFix *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_WPFileSystemFix_somDefaultInit *somTD_WPFileSystemFix_somDefaultInit;
typedef void   SOMLINK somTP_WPFileSystemFix_somDestruct(WPFileSystemFix *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_WPFileSystemFix_somDestruct *somTD_WPFileSystemFix_somDestruct;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpIdentify(WPFileSystemFix *somSelf, 
		PSZ pszIdentity);
typedef somTP_WPFileSystemFix_wpIdentify *somTD_WPFileSystemFix_wpIdentify;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpIsDeleteable(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpIsDeleteable *somTD_WPFileSystemFix_wpIsDeleteable;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpSetup(WPFileSystemFix *somSelf, 
		PSZ pszSetupString);
typedef somTP_WPFileSystemFix_wpSetup *somTD_WPFileSystemFix_wpSetup;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpAddObjectGeneralPage(WPFileSystemFix *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPFileSystemFix_wpAddObjectGeneralPage *somTD_WPFileSystemFix_wpAddObjectGeneralPage;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpAddObjectGeneralPage2(WPFileSystemFix *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPFileSystemFix_wpAddObjectGeneralPage2 *somTD_WPFileSystemFix_wpAddObjectGeneralPage2;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpAddObjectWindowPage(WPFileSystemFix *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPFileSystemFix_wpAddObjectWindowPage *somTD_WPFileSystemFix_wpAddObjectWindowPage;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpAddToObjUseList(WPFileSystemFix *somSelf, 
		PUSEITEM pUseItem);
typedef somTP_WPFileSystemFix_wpAddToObjUseList *somTD_WPFileSystemFix_wpAddToObjUseList;
typedef PBYTE   SOMLINK somTP_WPFileSystemFix_wpAllocMem(WPFileSystemFix *somSelf, 
		ULONG cbBytes, 
		PULONG prc);
typedef somTP_WPFileSystemFix_wpAllocMem *somTD_WPFileSystemFix_wpAllocMem;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpAssertObjectMutexSem(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpAssertObjectMutexSem *somTD_WPFileSystemFix_wpAssertObjectMutexSem;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpClose(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpClose *somTD_WPFileSystemFix_wpClose;
typedef PMINIRECORDCORE   SOMLINK somTP_WPFileSystemFix_wpCnrInsertObject(WPFileSystemFix *somSelf, 
		HWND hwndCnr, 
		PPOINTL pptlIcon, 
		PMINIRECORDCORE preccParent, 
		PRECORDINSERT pRecInsert);
typedef somTP_WPFileSystemFix_wpCnrInsertObject *somTD_WPFileSystemFix_wpCnrInsertObject;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpCnrRemoveObject(WPFileSystemFix *somSelf, 
		HWND hwndCnr);
typedef somTP_WPFileSystemFix_wpCnrRemoveObject *somTD_WPFileSystemFix_wpCnrRemoveObject;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpCnrSetEmphasis(WPFileSystemFix *somSelf, 
		ULONG ulEmphasisAttr, 
		BOOL fTurnOn);
typedef somTP_WPFileSystemFix_wpCnrSetEmphasis *somTD_WPFileSystemFix_wpCnrSetEmphasis;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpConfirmDelete(WPFileSystemFix *somSelf, 
		ULONG fConfirmations);
typedef somTP_WPFileSystemFix_wpConfirmDelete *somTD_WPFileSystemFix_wpConfirmDelete;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpConfirmObjectTitle(WPFileSystemFix *somSelf, 
		WPFolder* Folder, 
		WPObject** ppDuplicate, 
		PSZ pszTitle, 
		ULONG cbTitle, 
		ULONG menuID);
typedef somTP_WPFileSystemFix_wpConfirmObjectTitle *somTD_WPFileSystemFix_wpConfirmObjectTitle;
typedef void   SOMLINK somTP_WPFileSystemFix_wpCopiedFromTemplate(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpCopiedFromTemplate *somTD_WPFileSystemFix_wpCopiedFromTemplate;
typedef WPObject*   SOMLINK somTP_WPFileSystemFix_wpCreateAnother(WPFileSystemFix *somSelf, 
		PSZ pszTitle, 
		PSZ pszSetupEnv, 
		WPFolder* Folder);
typedef somTP_WPFileSystemFix_wpCreateAnother *somTD_WPFileSystemFix_wpCreateAnother;
typedef WPObject*   SOMLINK somTP_WPFileSystemFix_wpCreateShadowObject(WPFileSystemFix *somSelf, 
		WPFolder* Folder, 
		BOOL fLock);
typedef somTP_WPFileSystemFix_wpCreateShadowObject *somTD_WPFileSystemFix_wpCreateShadowObject;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpDelete(WPFileSystemFix *somSelf, 
		ULONG fConfirmations);
typedef somTP_WPFileSystemFix_wpDelete *somTD_WPFileSystemFix_wpDelete;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpDeleteFromObjUseList(WPFileSystemFix *somSelf, 
		PUSEITEM pUseItem);
typedef somTP_WPFileSystemFix_wpDeleteFromObjUseList *somTD_WPFileSystemFix_wpDeleteFromObjUseList;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpDisplayHelp(WPFileSystemFix *somSelf, 
		ULONG HelpPanelId, 
		PSZ HelpLibrary);
typedef somTP_WPFileSystemFix_wpDisplayHelp *somTD_WPFileSystemFix_wpDisplayHelp;
typedef HWND   SOMLINK somTP_WPFileSystemFix_wpDisplayMenu(WPFileSystemFix *somSelf, 
		HWND hwndOwner, 
		HWND hwndClient, 
		POINTL* ptlPopupPt, 
		ULONG ulMenuType, 
		ULONG ulReserved);
typedef somTP_WPFileSystemFix_wpDisplayMenu *somTD_WPFileSystemFix_wpDisplayMenu;
typedef MRESULT   SOMLINK somTP_WPFileSystemFix_wpDragOver(WPFileSystemFix *somSelf, 
		HWND hwndCnr, 
		PDRAGINFO pdrgInfo);
typedef somTP_WPFileSystemFix_wpDragOver *somTD_WPFileSystemFix_wpDragOver;
typedef MRESULT   SOMLINK somTP_WPFileSystemFix_wpDrop(WPFileSystemFix *somSelf, 
		HWND hwndCnr, 
		PDRAGINFO pdrgInfo, 
		PDRAGITEM pdrgItem);
typedef somTP_WPFileSystemFix_wpDrop *somTD_WPFileSystemFix_wpDrop;
typedef MRESULT   SOMLINK somTP_WPFileSystemFix_wpEndConversation(WPFileSystemFix *somSelf, 
		ULONG ulItemID, 
		ULONG flResult);
typedef somTP_WPFileSystemFix_wpEndConversation *somTD_WPFileSystemFix_wpEndConversation;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpFilterPopupMenu(WPFileSystemFix *somSelf, 
		ULONG ulFlags, 
		HWND hwndCnr, 
		BOOL fMultiSelect);
typedef somTP_WPFileSystemFix_wpFilterPopupMenu *somTD_WPFileSystemFix_wpFilterPopupMenu;
typedef PUSEITEM   SOMLINK somTP_WPFileSystemFix_wpFindUseItem(WPFileSystemFix *somSelf, 
		ULONG type, 
		PUSEITEM pCurrentItem);
typedef somTP_WPFileSystemFix_wpFindUseItem *somTD_WPFileSystemFix_wpFindUseItem;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpFree(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpFree *somTD_WPFileSystemFix_wpFree;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpFreeMem(WPFileSystemFix *somSelf, 
		PBYTE pByte);
typedef somTP_WPFileSystemFix_wpFreeMem *somTD_WPFileSystemFix_wpFreeMem;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpHide(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpHide *somTD_WPFileSystemFix_wpHide;
typedef void   SOMLINK somTP_WPFileSystemFix_wpInitData(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpInitData *somTD_WPFileSystemFix_wpInitData;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpInsertPopupMenuItems(WPFileSystemFix *somSelf, 
		HWND hwndMenu, 
		ULONG iPosition, 
		HMODULE hmod, 
		ULONG MenuID, 
		ULONG SubMenuID);
typedef somTP_WPFileSystemFix_wpInsertPopupMenuItems *somTD_WPFileSystemFix_wpInsertPopupMenuItems;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpInsertMenuItems(WPFileSystemFix *somSelf, 
		HWND hwndMenu, 
		ULONG iPosition, 
		HMODULE hmod, 
		ULONG MenuID, 
		ULONG SubMenuID);
typedef somTP_WPFileSystemFix_wpInsertMenuItems *somTD_WPFileSystemFix_wpInsertMenuItems;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpInsertSettingsPage(WPFileSystemFix *somSelf, 
		HWND hwndNotebook, 
		PPAGEINFO ppageinfo);
typedef somTP_WPFileSystemFix_wpInsertSettingsPage *somTD_WPFileSystemFix_wpInsertSettingsPage;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpMenuItemHelpSelected(WPFileSystemFix *somSelf, 
		ULONG MenuId);
typedef somTP_WPFileSystemFix_wpMenuItemHelpSelected *somTD_WPFileSystemFix_wpMenuItemHelpSelected;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpModifyPopupMenu(WPFileSystemFix *somSelf, 
		HWND hwndMenu, 
		HWND hwndCnr, 
		ULONG iPosition);
typedef somTP_WPFileSystemFix_wpModifyPopupMenu *somTD_WPFileSystemFix_wpModifyPopupMenu;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpPrintObject(WPFileSystemFix *somSelf, 
		PPRINTDEST pPrintDest, 
		ULONG ulReserved);
typedef somTP_WPFileSystemFix_wpPrintObject *somTD_WPFileSystemFix_wpPrintObject;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpQueryConcurrentView(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpQueryConcurrentView *somTD_WPFileSystemFix_wpQueryConcurrentView;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpQueryButtonAppearance(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpQueryButtonAppearance *somTD_WPFileSystemFix_wpQueryButtonAppearance;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpQueryConfirmations(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpQueryConfirmations *somTD_WPFileSystemFix_wpQueryConfirmations;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpQueryDefaultHelp(WPFileSystemFix *somSelf, 
		PULONG pHelpPanelId, 
		PSZ HelpLibrary);
typedef somTP_WPFileSystemFix_wpQueryDefaultHelp *somTD_WPFileSystemFix_wpQueryDefaultHelp;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpQueryDefaultView(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpQueryDefaultView *somTD_WPFileSystemFix_wpQueryDefaultView;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpQueryError(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpQueryError *somTD_WPFileSystemFix_wpQueryError;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpSetFolder(WPFileSystemFix *somSelf, 
		WPObject* container);
typedef somTP_WPFileSystemFix_wpSetFolder *somTD_WPFileSystemFix_wpSetFolder;
typedef WPObject*   SOMLINK somTP_WPFileSystemFix_wpQueryFolder(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpQueryFolder *somTD_WPFileSystemFix_wpQueryFolder;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpQueryMinWindow(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpQueryMinWindow *somTD_WPFileSystemFix_wpQueryMinWindow;
typedef BOOL32   SOMLINK somTP_WPFileSystemFix_wpSetTaskRec(WPFileSystemFix *somSelf, 
		PTASKREC pNew, 
		PTASKREC pOld);
typedef somTP_WPFileSystemFix_wpSetTaskRec *somTD_WPFileSystemFix_wpSetTaskRec;
typedef PTASKREC   SOMLINK somTP_WPFileSystemFix_wpFindTaskRec(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpFindTaskRec *somTD_WPFileSystemFix_wpFindTaskRec;
typedef PSZ   SOMLINK somTP_WPFileSystemFix_wpQueryTitle(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpQueryTitle *somTD_WPFileSystemFix_wpQueryTitle;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpRegisterView(WPFileSystemFix *somSelf, 
		HWND hwndFrame, 
		PSZ pszViewTitle);
typedef somTP_WPFileSystemFix_wpRegisterView *somTD_WPFileSystemFix_wpRegisterView;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpReleaseObjectMutexSem(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpReleaseObjectMutexSem *somTD_WPFileSystemFix_wpReleaseObjectMutexSem;
typedef MRESULT   SOMLINK somTP_WPFileSystemFix_wpRender(WPFileSystemFix *somSelf, 
		PDRAGTRANSFER pdxfer);
typedef somTP_WPFileSystemFix_wpRender *somTD_WPFileSystemFix_wpRender;
typedef MRESULT   SOMLINK somTP_WPFileSystemFix_wpRenderComplete(WPFileSystemFix *somSelf, 
		PDRAGTRANSFER pdxfer, 
		ULONG ulResult);
typedef somTP_WPFileSystemFix_wpRenderComplete *somTD_WPFileSystemFix_wpRenderComplete;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpRequestObjectMutexSem(WPFileSystemFix *somSelf, 
		ULONG ulTimeout);
typedef somTP_WPFileSystemFix_wpRequestObjectMutexSem *somTD_WPFileSystemFix_wpRequestObjectMutexSem;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpRestore(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpRestore *somTD_WPFileSystemFix_wpRestore;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpRestoreData(WPFileSystemFix *somSelf, 
		PSZ pszClass, 
		ULONG ulKey, 
		PBYTE pValue, 
		PULONG pcbValue);
typedef somTP_WPFileSystemFix_wpRestoreData *somTD_WPFileSystemFix_wpRestoreData;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpRestoreLong(WPFileSystemFix *somSelf, 
		PSZ pszClass, 
		ULONG ulKey, 
		PULONG pulValue);
typedef somTP_WPFileSystemFix_wpRestoreLong *somTD_WPFileSystemFix_wpRestoreLong;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpRestoreString(WPFileSystemFix *somSelf, 
		PSZ pszClass, 
		ULONG ulKey, 
		PSZ pszValue, 
		PULONG pcbValue);
typedef somTP_WPFileSystemFix_wpRestoreString *somTD_WPFileSystemFix_wpRestoreString;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpSaveData(WPFileSystemFix *somSelf, 
		PSZ pszClass, 
		ULONG ulKey, 
		PBYTE pValue, 
		ULONG cbValue);
typedef somTP_WPFileSystemFix_wpSaveData *somTD_WPFileSystemFix_wpSaveData;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpSaveDeferred(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpSaveDeferred *somTD_WPFileSystemFix_wpSaveDeferred;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpSaveLong(WPFileSystemFix *somSelf, 
		PSZ pszClass, 
		ULONG ulKey, 
		ULONG ulValue);
typedef somTP_WPFileSystemFix_wpSaveLong *somTD_WPFileSystemFix_wpSaveLong;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpSaveString(WPFileSystemFix *somSelf, 
		PSZ pszClass, 
		ULONG ulKey, 
		PSZ pszValue);
typedef somTP_WPFileSystemFix_wpSaveString *somTD_WPFileSystemFix_wpSaveString;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpScanSetupString(WPFileSystemFix *somSelf, 
		PSZ pszSetupString, 
		PSZ pszKey, 
		PSZ pszValue, 
		PULONG pcbValue);
typedef somTP_WPFileSystemFix_wpScanSetupString *somTD_WPFileSystemFix_wpScanSetupString;
typedef void   SOMLINK somTP_WPFileSystemFix_wpSetConcurrentView(WPFileSystemFix *somSelf, 
		ULONG ulCCView);
typedef somTP_WPFileSystemFix_wpSetConcurrentView *somTD_WPFileSystemFix_wpSetConcurrentView;
typedef void   SOMLINK somTP_WPFileSystemFix_wpSetButtonAppearance(WPFileSystemFix *somSelf, 
		ULONG ulButtonType);
typedef somTP_WPFileSystemFix_wpSetButtonAppearance *somTD_WPFileSystemFix_wpSetButtonAppearance;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpSetDefaultHelp(WPFileSystemFix *somSelf, 
		ULONG HelpPanelId, 
		PSZ HelpLibrary);
typedef somTP_WPFileSystemFix_wpSetDefaultHelp *somTD_WPFileSystemFix_wpSetDefaultHelp;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpSetDefaultView(WPFileSystemFix *somSelf, 
		ULONG ulView);
typedef somTP_WPFileSystemFix_wpSetDefaultView *somTD_WPFileSystemFix_wpSetDefaultView;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpSetError(WPFileSystemFix *somSelf, 
		ULONG ulErrorId);
typedef somTP_WPFileSystemFix_wpSetError *somTD_WPFileSystemFix_wpSetError;
typedef SGID   SOMLINK somTP_WPFileSystemFix_wpQueryScreenGroupID(WPFileSystemFix *somSelf, 
		SGID sgidPrevSgId);
typedef somTP_WPFileSystemFix_wpQueryScreenGroupID *somTD_WPFileSystemFix_wpQueryScreenGroupID;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpSetupOnce(WPFileSystemFix *somSelf, 
		PSZ pszSetupString);
typedef somTP_WPFileSystemFix_wpSetupOnce *somTD_WPFileSystemFix_wpSetupOnce;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpSetIcon(WPFileSystemFix *somSelf, 
		HPOINTER hptrNewIcon);
typedef somTP_WPFileSystemFix_wpSetIcon *somTD_WPFileSystemFix_wpSetIcon;
typedef void   SOMLINK somTP_WPFileSystemFix_wpSetMinWindow(WPFileSystemFix *somSelf, 
		ULONG ulMinWindow);
typedef somTP_WPFileSystemFix_wpSetMinWindow *somTD_WPFileSystemFix_wpSetMinWindow;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpModifyStyle(WPFileSystemFix *somSelf, 
		ULONG ulStyleFlags, 
		ULONG ulStyleMask);
typedef somTP_WPFileSystemFix_wpModifyStyle *somTD_WPFileSystemFix_wpModifyStyle;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpQueryTrueStyle(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpQueryTrueStyle *somTD_WPFileSystemFix_wpQueryTrueStyle;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpUnlockObject(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpUnlockObject *somTD_WPFileSystemFix_wpUnlockObject;
typedef void   SOMLINK somTP_WPFileSystemFix_wpObjectReady(WPFileSystemFix *somSelf, 
		ULONG ulCode, 
		WPObject* refObject);
typedef somTP_WPFileSystemFix_wpObjectReady *somTD_WPFileSystemFix_wpObjectReady;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpIsObjectInitialized(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpIsObjectInitialized *somTD_WPFileSystemFix_wpIsObjectInitialized;
typedef WPObject*   SOMLINK somTP_WPFileSystemFix_wpCreateShadowObjectExt(WPFileSystemFix *somSelf, 
		WPFolder* Folder, 
		BOOL fLock, 
		PSZ pszSetup, 
		M_WPObject* shadowClass);
typedef somTP_WPFileSystemFix_wpCreateShadowObjectExt *somTD_WPFileSystemFix_wpCreateShadowObjectExt;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpCnrDeleteUseItem(WPFileSystemFix *somSelf, 
		HWND hwndCnr);
typedef somTP_WPFileSystemFix_wpCnrDeleteUseItem *somTD_WPFileSystemFix_wpCnrDeleteUseItem;
typedef PMINIRECORDCORE   SOMLINK somTP_WPFileSystemFix_wpQueryCoreRecord(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpQueryCoreRecord *somTD_WPFileSystemFix_wpQueryCoreRecord;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpSetObjectID(WPFileSystemFix *somSelf, 
		PSZ pszObjectID);
typedef somTP_WPFileSystemFix_wpSetObjectID *somTD_WPFileSystemFix_wpSetObjectID;
typedef PSZ   SOMLINK somTP_WPFileSystemFix_wpQueryObjectID(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpQueryObjectID *somTD_WPFileSystemFix_wpQueryObjectID;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpSetDefaultIconPos(WPFileSystemFix *somSelf, 
		PPOINTL pPointl);
typedef somTP_WPFileSystemFix_wpSetDefaultIconPos *somTD_WPFileSystemFix_wpSetDefaultIconPos;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpQueryDefaultIconPos(WPFileSystemFix *somSelf, 
		PPOINTL pPointl);
typedef somTP_WPFileSystemFix_wpQueryDefaultIconPos *somTD_WPFileSystemFix_wpQueryDefaultIconPos;
typedef void   SOMLINK somTP_WPFileSystemFix_wpCnrRefreshDetails(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpCnrRefreshDetails *somTD_WPFileSystemFix_wpCnrRefreshDetails;
typedef PVIEWITEM   SOMLINK somTP_WPFileSystemFix_wpFindViewItem(WPFileSystemFix *somSelf, 
		ULONG flViews, 
		PVIEWITEM pCurrentItem);
typedef somTP_WPFileSystemFix_wpFindViewItem *somTD_WPFileSystemFix_wpFindViewItem;
typedef void   SOMLINK somTP_WPFileSystemFix_wpLockObject(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpLockObject *somTD_WPFileSystemFix_wpLockObject;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpIsLocked(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpIsLocked *somTD_WPFileSystemFix_wpIsLocked;
typedef PULONG   SOMLINK somTP_WPFileSystemFix_wpQueryContainerFlagPtr(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpQueryContainerFlagPtr *somTD_WPFileSystemFix_wpQueryContainerFlagPtr;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpWaitForClose(WPFileSystemFix *somSelf, 
		LHANDLE lhView, 
		ULONG ulViews, 
		long lTimeOut, 
		BOOL bAutoClose);
typedef somTP_WPFileSystemFix_wpWaitForClose *somTD_WPFileSystemFix_wpWaitForClose;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpSetMenuStyle(WPFileSystemFix *somSelf, 
		ULONG ulStyle);
typedef somTP_WPFileSystemFix_wpSetMenuStyle *somTD_WPFileSystemFix_wpSetMenuStyle;
typedef ULONG   SOMLINK somTP_WPFileSystemFix_wpQueryMenuStyle(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_wpQueryMenuStyle *somTD_WPFileSystemFix_wpQueryMenuStyle;
typedef BOOL   SOMLINK somTP_WPFileSystemFix_wpSetStyle(WPFileSystemFix *somSelf, 
		ULONG ulNewStyle);
typedef somTP_WPFileSystemFix_wpSetStyle *somTD_WPFileSystemFix_wpSetStyle;
typedef void   SOMLINK somTP_WPFileSystemFix_somInit(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_somInit *somTD_WPFileSystemFix_somInit;
typedef void   SOMLINK somTP_WPFileSystemFix_somUninit(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_somUninit *somTD_WPFileSystemFix_somUninit;
typedef void   SOMLINK somTP_WPFileSystemFix_somDefaultCopyInit(WPFileSystemFix *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_WPFileSystemFix_somDefaultCopyInit *somTD_WPFileSystemFix_somDefaultCopyInit;
typedef WPFileSystemFix*   SOMLINK somTP_WPFileSystemFix_somDefaultAssign(WPFileSystemFix *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_WPFileSystemFix_somDefaultAssign *somTD_WPFileSystemFix_somDefaultAssign;
typedef void   SOMLINK somTP_WPFileSystemFix_somDefaultConstCopyInit(WPFileSystemFix *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_WPFileSystemFix_somDefaultConstCopyInit *somTD_WPFileSystemFix_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_WPFileSystemFix_somDefaultVCopyInit(WPFileSystemFix *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_WPFileSystemFix_somDefaultVCopyInit *somTD_WPFileSystemFix_somDefaultVCopyInit;
typedef void   SOMLINK somTP_WPFileSystemFix_somDefaultConstVCopyInit(WPFileSystemFix *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_WPFileSystemFix_somDefaultConstVCopyInit *somTD_WPFileSystemFix_somDefaultConstVCopyInit;
typedef WPFileSystemFix*   SOMLINK somTP_WPFileSystemFix_somDefaultConstAssign(WPFileSystemFix *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_WPFileSystemFix_somDefaultConstAssign *somTD_WPFileSystemFix_somDefaultConstAssign;
typedef WPFileSystemFix*   SOMLINK somTP_WPFileSystemFix_somDefaultVAssign(WPFileSystemFix *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_WPFileSystemFix_somDefaultVAssign *somTD_WPFileSystemFix_somDefaultVAssign;
typedef WPFileSystemFix*   SOMLINK somTP_WPFileSystemFix_somDefaultConstVAssign(WPFileSystemFix *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_WPFileSystemFix_somDefaultConstVAssign *somTD_WPFileSystemFix_somDefaultConstVAssign;
typedef void   SOMLINK somTP_WPFileSystemFix_somFree(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_somFree *somTD_WPFileSystemFix_somFree;
typedef M_WPFileSystemFix*   SOMLINK somTP_WPFileSystemFix_somGetClass(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_somGetClass *somTD_WPFileSystemFix_somGetClass;
typedef string   SOMLINK somTP_WPFileSystemFix_somGetClassName(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_somGetClassName *somTD_WPFileSystemFix_somGetClassName;
typedef long   SOMLINK somTP_WPFileSystemFix_somGetSize(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_somGetSize *somTD_WPFileSystemFix_somGetSize;
typedef boolean   SOMLINK somTP_WPFileSystemFix_somIsA(WPFileSystemFix *somSelf, 
		SOMClass* aClassObj);
typedef somTP_WPFileSystemFix_somIsA *somTD_WPFileSystemFix_somIsA;
typedef boolean   SOMLINK somTP_WPFileSystemFix_somIsInstanceOf(WPFileSystemFix *somSelf, 
		SOMClass* aClassObj);
typedef somTP_WPFileSystemFix_somIsInstanceOf *somTD_WPFileSystemFix_somIsInstanceOf;
typedef boolean   SOMLINK somTP_WPFileSystemFix_somRespondsTo(WPFileSystemFix *somSelf, 
		somId mId);
typedef somTP_WPFileSystemFix_somRespondsTo *somTD_WPFileSystemFix_somRespondsTo;
typedef boolean   SOMLINK somTP_WPFileSystemFix_somDispatch(WPFileSystemFix *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_WPFileSystemFix_somDispatch *somTD_WPFileSystemFix_somDispatch;
typedef boolean   SOMLINK somTP_WPFileSystemFix_somClassDispatch(WPFileSystemFix *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_WPFileSystemFix_somClassDispatch *somTD_WPFileSystemFix_somClassDispatch;
typedef boolean   SOMLINK somTP_WPFileSystemFix_somCastObj(WPFileSystemFix *somSelf, 
		SOMClass* cls);
typedef somTP_WPFileSystemFix_somCastObj *somTD_WPFileSystemFix_somCastObj;
typedef boolean   SOMLINK somTP_WPFileSystemFix_somResetObj(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_somResetObj *somTD_WPFileSystemFix_somResetObj;
typedef void   SOMLINK somTP_WPFileSystemFix_somDispatchV(WPFileSystemFix *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_WPFileSystemFix_somDispatchV *somTD_WPFileSystemFix_somDispatchV;
typedef long   SOMLINK somTP_WPFileSystemFix_somDispatchL(WPFileSystemFix *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_WPFileSystemFix_somDispatchL *somTD_WPFileSystemFix_somDispatchL;
typedef void*   SOMLINK somTP_WPFileSystemFix_somDispatchA(WPFileSystemFix *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_WPFileSystemFix_somDispatchA *somTD_WPFileSystemFix_somDispatchA;
typedef double   SOMLINK somTP_WPFileSystemFix_somDispatchD(WPFileSystemFix *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_WPFileSystemFix_somDispatchD *somTD_WPFileSystemFix_somDispatchD;
typedef SOMObject*   SOMLINK somTP_WPFileSystemFix_somPrintSelf(WPFileSystemFix *somSelf);
typedef somTP_WPFileSystemFix_somPrintSelf *somTD_WPFileSystemFix_somPrintSelf;
typedef void   SOMLINK somTP_WPFileSystemFix_somDumpSelf(WPFileSystemFix *somSelf, 
		long level);
typedef somTP_WPFileSystemFix_somDumpSelf *somTD_WPFileSystemFix_somDumpSelf;
typedef void   SOMLINK somTP_WPFileSystemFix_somDumpSelfInt(WPFileSystemFix *somSelf, 
		long level);
typedef somTP_WPFileSystemFix_somDumpSelfInt *somTD_WPFileSystemFix_somDumpSelfInt;
}

#endif /* WPFileSystemFix_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPFileSystemFix
 */
class WPFileSystemFix : public WPFileSystem
{
public:

// WPFileSystemFix::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPFileSystemFix) WPFileSystemFixNewClass(WPFileSystemFix_MajorVersion,WPFileSystemFix_MinorVersion);
   return (void*)
      SOM_Resolve(_WPFileSystemFix,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPFileSystemFix));
}

// WPFileSystemFix::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

WPFileSystemFix& operator=(WPFileSystemFix& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPFileSystemFix()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPFileSystemFixCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPFileSystemFix(WPFileSystemFix* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPFileSystemFixCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
WPFileSystemFix(const WPFileSystemFix* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPFileSystemFixCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/* method: _get_fIsInitialized */
BOOL   _get_fIsInitialized()
{
/*
 * Method from the IDL attribute statement:
 * "attribute BOOL fIsInitialized"
 */
   return SOM_ResolveD(this,WPFileSystemFix,WPFileSystemFix,_get_fIsInitialized)
	(this);
}


/* method: _set_fIsInitialized */
void   _set_fIsInitialized(BOOL fIsInitialized)
{
/*
 * Method from the IDL attribute statement:
 * "attribute BOOL fIsInitialized"
 */
   SOM_ResolveD(this,WPFileSystemFix,WPFileSystemFix,_set_fIsInitialized)
	(this,fIsInitialized);
}


/*
 * Reintroduce inherited methods
 */

/* method: wpSetRealName */
BOOL   wpSetRealName(PSZ pszName)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPFileSystem,wpSetRealName)
	(this,pszName);
}


/* method: wpSetType */
BOOL   wpSetType(PSZ pszTypes, 
		PFEA2LIST pfeal)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPFileSystem,wpSetType)
	(this,pszTypes,pfeal);
}


/* method: wpQueryType */
PSZ   wpQueryType()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPFileSystem,wpQueryType)
	(this);
}


/* method: wpSetAttr */
BOOL   wpSetAttr(ULONG attrFile)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPFileSystem,wpSetAttr)
	(this,attrFile);
}


/* method: wpQueryAttr */
ULONG   wpQueryAttr()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPFileSystem,wpQueryAttr)
	(this);
}


/* method: wpAddFile1Page */
ULONG   wpAddFile1Page(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPFileSystem,wpAddFile1Page)
	(this,hwndNotebook);
}


/* method: wpAddFile2Page */
ULONG   wpAddFile2Page(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPFileSystem,wpAddFile2Page)
	(this,hwndNotebook);
}


/* method: wpAddFile3Page */
ULONG   wpAddFile3Page(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPFileSystem,wpAddFile3Page)
	(this,hwndNotebook);
}


/* method: wpAddFileMenuPage */
ULONG   wpAddFileMenuPage(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPFileSystem,wpAddFileMenuPage)
	(this,hwndNotebook);
}


/* method: wpQueryCreation */
ULONG   wpQueryCreation(FDATE* fdate, 
		FTIME* ftime)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPFileSystem,wpQueryCreation)
	(this,fdate,ftime);
}


/* method: wpQueryLastAccess */
ULONG   wpQueryLastAccess(FDATE* fdate, 
		FTIME* ftime)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPFileSystem,wpQueryLastAccess)
	(this,fdate,ftime);
}


/* method: wpQueryLastWrite */
ULONG   wpQueryLastWrite(FDATE* fdate, 
		FTIME* ftime)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPFileSystem,wpQueryLastWrite)
	(this,fdate,ftime);
}


/* method: wpQueryFileSize */
ULONG   wpQueryFileSize()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPFileSystem,wpQueryFileSize)
	(this);
}


/* method: wpQueryEASize */
ULONG   wpQueryEASize()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPFileSystem,wpQueryEASize)
	(this);
}


/* method: wpSetDateInfo */
ULONG   wpSetDateInfo(FILEFINDBUF4* pstFileFindBuf)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPFileSystem,wpSetDateInfo)
	(this,pstFileFindBuf);
}


/* method: wpSetFileSizeInfo */
ULONG   wpSetFileSizeInfo(ULONG cbFileSize, 
		ULONG cbEASize)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPFileSystem,wpSetFileSizeInfo)
	(this,cbFileSize,cbEASize);
}


/* method: wpRefresh */
BOOL   wpRefresh(ULONG ulView, 
		PVOID pReserved)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPFileSystem,wpRefresh)
	(this,ulView,pReserved);
}


/* method: wpQueryRefreshFlags */
ULONG   wpQueryRefreshFlags()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPFileSystem,wpQueryRefreshFlags)
	(this);
}


/* method: wpSetRefreshFlags */
BOOL   wpSetRefreshFlags(ULONG ulRefreshFlags)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPFileSystem,wpSetRefreshFlags)
	(this,ulRefreshFlags);
}


/* method: wpPrintPlainTextFile */
BOOL   wpPrintPlainTextFile(PPRINTDEST pPrintDest)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPFileSystem,wpPrintPlainTextFile)
	(this,pPrintDest);
}


/* method: wpSetTitleAndRenameFile */
BOOL   wpSetTitleAndRenameFile(PSZ pszNewTitle, 
		ULONG fConfirmations)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPFileSystem,wpSetTitleAndRenameFile)
	(this,pszNewTitle,fConfirmations);
}


/* method: wpConfirmRenameFileWithExt */
ULONG   wpConfirmRenameFileWithExt()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPFileSystem,wpConfirmRenameFileWithExt)
	(this);
}


/* method: wpVerifyUpdateAccess */
ULONG   wpVerifyUpdateAccess()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPFileSystem,wpVerifyUpdateAccess)
	(this);
}


/* method: wpQueryEASupport */
ULONG   wpQueryEASupport()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPFileSystem,wpQueryEASupport)
	(this);
}


/* method: wpAddUserItemsToPopupMenu */
BOOL   wpAddUserItemsToPopupMenu(HWND hwndMenu, 
		HWND hwndCnr, 
		ULONG iPosition)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPFileSystem,wpAddUserItemsToPopupMenu)
	(this,hwndMenu,hwndCnr,iPosition);
}


/* method: wpIsDiskSwapped */
BOOL   wpIsDiskSwapped()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPFileSystem,wpIsDiskSwapped)
	(this);
}


/* method: wpQueryRealName */
BOOL   wpQueryRealName(PSZ pszFilename, 
		PULONG pcb, 
		BOOL fQualified)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPFileSystem,wpQueryRealName)
	(this,pszFilename,pcb,fQualified);
}


/* method: wpQueryFilename */
PSZ   wpQueryFilename(PSZ pszFilename, 
		BOOL fQualified)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPFileSystem,wpQueryFilename)
	(this,pszFilename,fQualified);
}


/* method: wpQueryDisk */
WPFileSystem*   wpQueryDisk()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPFileSystem,wpQueryDisk)
	(this);
}


/* method: wpQueryDateInfo */
ULONG   wpQueryDateInfo(FILEFINDBUF4* pstFileFindBuf)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPFileSystem,wpQueryDateInfo)
	(this,pstFileFindBuf);
}


/* method: wpConfirmKeepAssoc */
ULONG   wpConfirmKeepAssoc()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPFileSystem,wpConfirmKeepAssoc)
	(this);
}


/* method: wpQueryFileSizeL */
void   wpQueryFileSizeL(PLONGLONG pllFileSize)
{
   SOM_ResolveD(this,WPFileSystemFix,WPFileSystem,wpQueryFileSizeL)
	(this,pllFileSize);
}


/* method: wpSetFileSizeL */
ULONG   wpSetFileSizeL(PLONGLONG pllFileSize)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPFileSystem,wpSetFileSizeL)
	(this,pllFileSize);
}


/* method: wpUnInitData */
void   wpUnInitData()
{
   SOM_ResolveD(this,WPFileSystemFix,WPObject,wpUnInitData)
	(this);
}


/* method: wpQueryHandle */
HOBJECT   wpQueryHandle()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpQueryHandle)
	(this);
}


/* method: wpSaveImmediate */
BOOL   wpSaveImmediate()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpSaveImmediate)
	(this);
}


/* method: wpSetTitle */
BOOL   wpSetTitle(PSZ pszNewTitle)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpSetTitle)
	(this,pszNewTitle);
}


/* method: wpViewObject */
HWND   wpViewObject(HWND hwndCnr, 
		ULONG ulView, 
		ULONG param)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpViewObject)
	(this,hwndCnr,ulView,param);
}


/* method: wpSwitchTo */
BOOL   wpSwitchTo(ULONG View)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpSwitchTo)
	(this,View);
}


/* method: wpAddSettingsPages */
BOOL   wpAddSettingsPages(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpAddSettingsPages)
	(this,hwndNotebook);
}


/* method: wpCopyObject */
WPObject*   wpCopyObject(WPFolder* Folder, 
		BOOL fLock)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpCopyObject)
	(this,Folder,fLock);
}


/* method: wpCreateFromTemplate */
WPObject*   wpCreateFromTemplate(WPFolder* folder, 
		BOOL fLock)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpCreateFromTemplate)
	(this,folder,fLock);
}


/* method: wpMoveObject */
BOOL   wpMoveObject(WPFolder* Folder)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpMoveObject)
	(this,Folder);
}


/* method: wpQueryIcon */
HPOINTER   wpQueryIcon()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpQueryIcon)
	(this);
}


/* method: wpQueryIconData */
ULONG   wpQueryIconData(PICONINFO pIconInfo)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpQueryIconData)
	(this,pIconInfo);
}


/* method: wpSetIconData */
BOOL   wpSetIconData(PICONINFO pIconInfo)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpSetIconData)
	(this,pIconInfo);
}


/* method: wpQueryDetailsData */
ULONG   wpQueryDetailsData(PVOID* ppDetailsData, 
		PULONG pcp)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpQueryDetailsData)
	(this,ppDetailsData,pcp);
}


/* method: wpSaveState */
BOOL   wpSaveState()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpSaveState)
	(this);
}


/* method: wpRestoreState */
BOOL   wpRestoreState(ULONG ulReserved)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpRestoreState)
	(this,ulReserved);
}


/* method: wpMenuItemSelected */
BOOL   wpMenuItemSelected(HWND hwndFrame, 
		ULONG ulMenuId)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpMenuItemSelected)
	(this,hwndFrame,ulMenuId);
}


/* method: wpOpen */
HWND   wpOpen(HWND hwndCnr, 
		ULONG ulView, 
		ULONG param)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpOpen)
	(this,hwndCnr,ulView,param);
}


/* method: wpDraggedOverObject */
MRESULT   wpDraggedOverObject(WPObject* DraggedOverObject)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpDraggedOverObject)
	(this,DraggedOverObject);
}


/* method: wpDroppedOnObject */
BOOL   wpDroppedOnObject(WPObject* DroppedOnObject)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpDroppedOnObject)
	(this,DroppedOnObject);
}


/* method: wpFormatDragItem */
BOOL   wpFormatDragItem(PDRAGITEM pdrgItem)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpFormatDragItem)
	(this,pdrgItem);
}


/* method: wpQueryNameClashOptions */
ULONG   wpQueryNameClashOptions(ULONG menuID)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpQueryNameClashOptions)
	(this,menuID);
}


/* method: wpAppendObject */
BOOL32   wpAppendObject(WPObject* targetObject, 
		BOOL32 fMove)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpAppendObject)
	(this,targetObject,fMove);
}


/* method: wpReplaceObject */
BOOL32   wpReplaceObject(WPObject* targetObject, 
		BOOL32 fMove)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpReplaceObject)
	(this,targetObject,fMove);
}


/* method: wpQueryStyle */
ULONG   wpQueryStyle()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpQueryStyle)
	(this);
}


/* method: wpModifyMenu */
BOOL   wpModifyMenu(HWND hwndMenu, 
		HWND hwndCnr, 
		ULONG iPosition, 
		ULONG ulMenuType, 
		ULONG ulView, 
		ULONG ulReserved)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpModifyMenu)
	(this,hwndMenu,hwndCnr,iPosition,ulMenuType,ulView,ulReserved);
}


/* method: wpFilterMenu */
BOOL   wpFilterMenu(FILTERFLAGS* pFlags, 
		HWND hwndCnr, 
		BOOL fMultiSelect, 
		ULONG ulMenuType, 
		ULONG ulView, 
		ULONG ulReserved)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpFilterMenu)
	(this,pFlags,hwndCnr,fMultiSelect,ulMenuType,ulView,ulReserved);
}


/* method: wpDoesObjectMatch */
BOOL   wpDoesObjectMatch(PVOID pvoidExtendedCriteria)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpDoesObjectMatch)
	(this,pvoidExtendedCriteria);
}


/* method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
   SOM_ResolveD(this,WPFileSystemFix,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
   SOM_ResolveD(this,WPFileSystemFix,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: wpIdentify */
BOOL   wpIdentify(PSZ pszIdentity)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpIdentify)
	(this,pszIdentity);
}


/* method: wpIsDeleteable */
BOOL   wpIsDeleteable()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpIsDeleteable)
	(this);
}


/* method: wpSetup */
BOOL   wpSetup(PSZ pszSetupString)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpSetup)
	(this,pszSetupString);
}


/* method: wpAddObjectGeneralPage */
ULONG   wpAddObjectGeneralPage(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpAddObjectGeneralPage)
	(this,hwndNotebook);
}


/* method: wpAddObjectGeneralPage2 */
ULONG   wpAddObjectGeneralPage2(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpAddObjectGeneralPage2)
	(this,hwndNotebook);
}


/* method: wpAddObjectWindowPage */
ULONG   wpAddObjectWindowPage(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpAddObjectWindowPage)
	(this,hwndNotebook);
}


/* method: wpAddToObjUseList */
BOOL   wpAddToObjUseList(PUSEITEM pUseItem)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpAddToObjUseList)
	(this,pUseItem);
}


/* method: wpAllocMem */
PBYTE   wpAllocMem(ULONG cbBytes, 
		PULONG prc)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpAllocMem)
	(this,cbBytes,prc);
}


/* method: wpAssertObjectMutexSem */
BOOL   wpAssertObjectMutexSem()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpAssertObjectMutexSem)
	(this);
}


/* method: wpClose */
BOOL   wpClose()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpClose)
	(this);
}


/* method: wpCnrInsertObject */
PMINIRECORDCORE   wpCnrInsertObject(HWND hwndCnr, 
		PPOINTL pptlIcon, 
		PMINIRECORDCORE preccParent, 
		PRECORDINSERT pRecInsert)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpCnrInsertObject)
	(this,hwndCnr,pptlIcon,preccParent,pRecInsert);
}


/* method: wpCnrRemoveObject */
BOOL   wpCnrRemoveObject(HWND hwndCnr)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpCnrRemoveObject)
	(this,hwndCnr);
}


/* method: wpCnrSetEmphasis */
BOOL   wpCnrSetEmphasis(ULONG ulEmphasisAttr, 
		BOOL fTurnOn)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpCnrSetEmphasis)
	(this,ulEmphasisAttr,fTurnOn);
}


/* method: wpConfirmDelete */
ULONG   wpConfirmDelete(ULONG fConfirmations)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpConfirmDelete)
	(this,fConfirmations);
}


/* method: wpConfirmObjectTitle */
ULONG   wpConfirmObjectTitle(WPFolder* Folder, 
		WPObject** ppDuplicate, 
		PSZ pszTitle, 
		ULONG cbTitle, 
		ULONG menuID)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpConfirmObjectTitle)
	(this,Folder,ppDuplicate,pszTitle,cbTitle,menuID);
}


/* method: wpCopiedFromTemplate */
void   wpCopiedFromTemplate()
{
   SOM_ResolveD(this,WPFileSystemFix,WPObject,wpCopiedFromTemplate)
	(this);
}


/* method: wpCreateAnother */
WPObject*   wpCreateAnother(PSZ pszTitle, 
		PSZ pszSetupEnv, 
		WPFolder* Folder)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpCreateAnother)
	(this,pszTitle,pszSetupEnv,Folder);
}


/* method: wpCreateShadowObject */
WPObject*   wpCreateShadowObject(WPFolder* Folder, 
		BOOL fLock)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpCreateShadowObject)
	(this,Folder,fLock);
}


/* method: wpDelete */
ULONG   wpDelete(ULONG fConfirmations)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpDelete)
	(this,fConfirmations);
}


/* method: wpDeleteFromObjUseList */
BOOL   wpDeleteFromObjUseList(PUSEITEM pUseItem)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpDeleteFromObjUseList)
	(this,pUseItem);
}


/* method: wpDisplayHelp */
BOOL   wpDisplayHelp(ULONG HelpPanelId, 
		PSZ HelpLibrary)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpDisplayHelp)
	(this,HelpPanelId,HelpLibrary);
}


/* method: wpDisplayMenu */
HWND   wpDisplayMenu(HWND hwndOwner, 
		HWND hwndClient, 
		POINTL* ptlPopupPt, 
		ULONG ulMenuType, 
		ULONG ulReserved)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpDisplayMenu)
	(this,hwndOwner,hwndClient,ptlPopupPt,ulMenuType,ulReserved);
}


/* method: wpDragOver */
MRESULT   wpDragOver(HWND hwndCnr, 
		PDRAGINFO pdrgInfo)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpDragOver)
	(this,hwndCnr,pdrgInfo);
}


/* method: wpDrop */
MRESULT   wpDrop(HWND hwndCnr, 
		PDRAGINFO pdrgInfo, 
		PDRAGITEM pdrgItem)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpDrop)
	(this,hwndCnr,pdrgInfo,pdrgItem);
}


/* method: wpEndConversation */
MRESULT   wpEndConversation(ULONG ulItemID, 
		ULONG flResult)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpEndConversation)
	(this,ulItemID,flResult);
}


/* method: wpFilterPopupMenu */
ULONG   wpFilterPopupMenu(ULONG ulFlags, 
		HWND hwndCnr, 
		BOOL fMultiSelect)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpFilterPopupMenu)
	(this,ulFlags,hwndCnr,fMultiSelect);
}


/* method: wpFindUseItem */
PUSEITEM   wpFindUseItem(ULONG type, 
		PUSEITEM pCurrentItem)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpFindUseItem)
	(this,type,pCurrentItem);
}


/* method: wpFree */
BOOL   wpFree()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpFree)
	(this);
}


/* method: wpFreeMem */
BOOL   wpFreeMem(PBYTE pByte)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpFreeMem)
	(this,pByte);
}


/* method: wpHide */
BOOL   wpHide()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpHide)
	(this);
}


/* method: wpInitData */
void   wpInitData()
{
   SOM_ResolveD(this,WPFileSystemFix,WPObject,wpInitData)
	(this);
}


/* method: wpInsertPopupMenuItems */
BOOL   wpInsertPopupMenuItems(HWND hwndMenu, 
		ULONG iPosition, 
		HMODULE hmod, 
		ULONG MenuID, 
		ULONG SubMenuID)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpInsertPopupMenuItems)
	(this,hwndMenu,iPosition,hmod,MenuID,SubMenuID);
}


/* method: wpInsertMenuItems */
BOOL   wpInsertMenuItems(HWND hwndMenu, 
		ULONG iPosition, 
		HMODULE hmod, 
		ULONG MenuID, 
		ULONG SubMenuID)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpInsertMenuItems)
	(this,hwndMenu,iPosition,hmod,MenuID,SubMenuID);
}


/* method: wpInsertSettingsPage */
ULONG   wpInsertSettingsPage(HWND hwndNotebook, 
		PPAGEINFO ppageinfo)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpInsertSettingsPage)
	(this,hwndNotebook,ppageinfo);
}


/* method: wpMenuItemHelpSelected */
BOOL   wpMenuItemHelpSelected(ULONG MenuId)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpMenuItemHelpSelected)
	(this,MenuId);
}


/* method: wpModifyPopupMenu */
BOOL   wpModifyPopupMenu(HWND hwndMenu, 
		HWND hwndCnr, 
		ULONG iPosition)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpModifyPopupMenu)
	(this,hwndMenu,hwndCnr,iPosition);
}


/* method: wpPrintObject */
BOOL   wpPrintObject(PPRINTDEST pPrintDest, 
		ULONG ulReserved)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpPrintObject)
	(this,pPrintDest,ulReserved);
}


/* method: wpQueryConcurrentView */
ULONG   wpQueryConcurrentView()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpQueryConcurrentView)
	(this);
}


/* method: wpQueryButtonAppearance */
ULONG   wpQueryButtonAppearance()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpQueryButtonAppearance)
	(this);
}


/* method: wpQueryConfirmations */
ULONG   wpQueryConfirmations()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpQueryConfirmations)
	(this);
}


/* method: wpQueryDefaultHelp */
BOOL   wpQueryDefaultHelp(PULONG pHelpPanelId, 
		PSZ HelpLibrary)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpQueryDefaultHelp)
	(this,pHelpPanelId,HelpLibrary);
}


/* method: wpQueryDefaultView */
ULONG   wpQueryDefaultView()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpQueryDefaultView)
	(this);
}


/* method: wpQueryError */
ULONG   wpQueryError()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpQueryError)
	(this);
}


/* method: wpSetFolder */
BOOL   wpSetFolder(WPObject* container)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpSetFolder)
	(this,container);
}


/* method: wpQueryFolder */
WPObject*   wpQueryFolder()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpQueryFolder)
	(this);
}


/* method: wpQueryMinWindow */
ULONG   wpQueryMinWindow()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpQueryMinWindow)
	(this);
}


/* method: wpSetTaskRec */
BOOL32   wpSetTaskRec(PTASKREC pNew, 
		PTASKREC pOld)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpSetTaskRec)
	(this,pNew,pOld);
}


/* method: wpFindTaskRec */
PTASKREC   wpFindTaskRec()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpFindTaskRec)
	(this);
}


/* method: wpQueryTitle */
PSZ   wpQueryTitle()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpQueryTitle)
	(this);
}


/* method: wpRegisterView */
BOOL   wpRegisterView(HWND hwndFrame, 
		PSZ pszViewTitle)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpRegisterView)
	(this,hwndFrame,pszViewTitle);
}


/* method: wpReleaseObjectMutexSem */
ULONG   wpReleaseObjectMutexSem()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpReleaseObjectMutexSem)
	(this);
}


/* method: wpRender */
MRESULT   wpRender(PDRAGTRANSFER pdxfer)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpRender)
	(this,pdxfer);
}


/* method: wpRenderComplete */
MRESULT   wpRenderComplete(PDRAGTRANSFER pdxfer, 
		ULONG ulResult)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpRenderComplete)
	(this,pdxfer,ulResult);
}


/* method: wpRequestObjectMutexSem */
ULONG   wpRequestObjectMutexSem(ULONG ulTimeout)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpRequestObjectMutexSem)
	(this,ulTimeout);
}


/* method: wpRestore */
BOOL   wpRestore()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpRestore)
	(this);
}


/* method: wpRestoreData */
BOOL   wpRestoreData(PSZ pszClass, 
		ULONG ulKey, 
		PBYTE pValue, 
		PULONG pcbValue)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpRestoreData)
	(this,pszClass,ulKey,pValue,pcbValue);
}


/* method: wpRestoreLong */
BOOL   wpRestoreLong(PSZ pszClass, 
		ULONG ulKey, 
		PULONG pulValue)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpRestoreLong)
	(this,pszClass,ulKey,pulValue);
}


/* method: wpRestoreString */
BOOL   wpRestoreString(PSZ pszClass, 
		ULONG ulKey, 
		PSZ pszValue, 
		PULONG pcbValue)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpRestoreString)
	(this,pszClass,ulKey,pszValue,pcbValue);
}


/* method: wpSaveData */
BOOL   wpSaveData(PSZ pszClass, 
		ULONG ulKey, 
		PBYTE pValue, 
		ULONG cbValue)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpSaveData)
	(this,pszClass,ulKey,pValue,cbValue);
}


/* method: wpSaveDeferred */
BOOL   wpSaveDeferred()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpSaveDeferred)
	(this);
}


/* method: wpSaveLong */
BOOL   wpSaveLong(PSZ pszClass, 
		ULONG ulKey, 
		ULONG ulValue)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpSaveLong)
	(this,pszClass,ulKey,ulValue);
}


/* method: wpSaveString */
BOOL   wpSaveString(PSZ pszClass, 
		ULONG ulKey, 
		PSZ pszValue)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpSaveString)
	(this,pszClass,ulKey,pszValue);
}


/* method: wpScanSetupString */
BOOL   wpScanSetupString(PSZ pszSetupString, 
		PSZ pszKey, 
		PSZ pszValue, 
		PULONG pcbValue)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpScanSetupString)
	(this,pszSetupString,pszKey,pszValue,pcbValue);
}


/* method: wpSetConcurrentView */
void   wpSetConcurrentView(ULONG ulCCView)
{
   SOM_ResolveD(this,WPFileSystemFix,WPObject,wpSetConcurrentView)
	(this,ulCCView);
}


/* method: wpSetButtonAppearance */
void   wpSetButtonAppearance(ULONG ulButtonType)
{
   SOM_ResolveD(this,WPFileSystemFix,WPObject,wpSetButtonAppearance)
	(this,ulButtonType);
}


/* method: wpSetDefaultHelp */
BOOL   wpSetDefaultHelp(ULONG HelpPanelId, 
		PSZ HelpLibrary)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpSetDefaultHelp)
	(this,HelpPanelId,HelpLibrary);
}


/* method: wpSetDefaultView */
BOOL   wpSetDefaultView(ULONG ulView)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpSetDefaultView)
	(this,ulView);
}


/* method: wpSetError */
BOOL   wpSetError(ULONG ulErrorId)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpSetError)
	(this,ulErrorId);
}


/* method: wpQueryScreenGroupID */
SGID   wpQueryScreenGroupID(SGID sgidPrevSgId)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpQueryScreenGroupID)
	(this,sgidPrevSgId);
}


/* method: wpSetupOnce */
BOOL   wpSetupOnce(PSZ pszSetupString)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpSetupOnce)
	(this,pszSetupString);
}


/* method: wpSetIcon */
BOOL   wpSetIcon(HPOINTER hptrNewIcon)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpSetIcon)
	(this,hptrNewIcon);
}


/* method: wpSetMinWindow */
void   wpSetMinWindow(ULONG ulMinWindow)
{
   SOM_ResolveD(this,WPFileSystemFix,WPObject,wpSetMinWindow)
	(this,ulMinWindow);
}


/* method: wpModifyStyle */
BOOL   wpModifyStyle(ULONG ulStyleFlags, 
		ULONG ulStyleMask)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpModifyStyle)
	(this,ulStyleFlags,ulStyleMask);
}


/* procedure: wpQueryTrueStyle */
static ULONG   wpQueryTrueStyle(WPFileSystemFix *somSelf)
{
   return ((somTD_WPFileSystemFix_wpQueryTrueStyle)WPObjectClassData.wpQueryTrueStyle)
	(somSelf);
}


/* method: wpUnlockObject */
BOOL   wpUnlockObject()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpUnlockObject)
	(this);
}


/* method: wpObjectReady */
void   wpObjectReady(ULONG ulCode, 
		WPObject* refObject)
{
   SOM_ResolveD(this,WPFileSystemFix,WPObject,wpObjectReady)
	(this,ulCode,refObject);
}


/* method: wpIsObjectInitialized */
BOOL   wpIsObjectInitialized()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpIsObjectInitialized)
	(this);
}


/* method: wpCreateShadowObjectExt */
WPObject*   wpCreateShadowObjectExt(WPFolder* Folder, 
		BOOL fLock, 
		PSZ pszSetup, 
		M_WPObject* shadowClass)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpCreateShadowObjectExt)
	(this,Folder,fLock,pszSetup,shadowClass);
}


/* method: wpCnrDeleteUseItem */
BOOL   wpCnrDeleteUseItem(HWND hwndCnr)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpCnrDeleteUseItem)
	(this,hwndCnr);
}


/* method: wpQueryCoreRecord */
PMINIRECORDCORE   wpQueryCoreRecord()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpQueryCoreRecord)
	(this);
}


/* method: wpSetObjectID */
BOOL   wpSetObjectID(PSZ pszObjectID)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpSetObjectID)
	(this,pszObjectID);
}


/* method: wpQueryObjectID */
PSZ   wpQueryObjectID()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpQueryObjectID)
	(this);
}


/* method: wpSetDefaultIconPos */
BOOL   wpSetDefaultIconPos(PPOINTL pPointl)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpSetDefaultIconPos)
	(this,pPointl);
}


/* method: wpQueryDefaultIconPos */
BOOL   wpQueryDefaultIconPos(PPOINTL pPointl)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpQueryDefaultIconPos)
	(this,pPointl);
}


/* method: wpCnrRefreshDetails */
void   wpCnrRefreshDetails()
{
   SOM_ResolveD(this,WPFileSystemFix,WPObject,wpCnrRefreshDetails)
	(this);
}


/* method: wpFindViewItem */
PVIEWITEM   wpFindViewItem(ULONG flViews, 
		PVIEWITEM pCurrentItem)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpFindViewItem)
	(this,flViews,pCurrentItem);
}


/* method: wpLockObject */
void   wpLockObject()
{
   SOM_ResolveD(this,WPFileSystemFix,WPObject,wpLockObject)
	(this);
}


/* method: wpIsLocked */
BOOL   wpIsLocked()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpIsLocked)
	(this);
}


/* method: wpQueryContainerFlagPtr */
PULONG   wpQueryContainerFlagPtr()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpQueryContainerFlagPtr)
	(this);
}


/* method: wpWaitForClose */
ULONG   wpWaitForClose(LHANDLE lhView, 
		ULONG ulViews, 
		long lTimeOut, 
		BOOL bAutoClose)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpWaitForClose)
	(this,lhView,ulViews,lTimeOut,bAutoClose);
}


/* method: wpSetMenuStyle */
BOOL   wpSetMenuStyle(ULONG ulStyle)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpSetMenuStyle)
	(this,ulStyle);
}


/* method: wpQueryMenuStyle */
ULONG   wpQueryMenuStyle()
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpQueryMenuStyle)
	(this);
}


/* method: wpSetStyle */
BOOL   wpSetStyle(ULONG ulNewStyle)
{
   return SOM_ResolveD(this,WPFileSystemFix,WPObject,wpSetStyle)
	(this,ulNewStyle);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,WPFileSystemFix,SOMObject,somInit)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,WPFileSystemFix,SOMObject,somUninit)
	(this);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,WPFileSystemFix,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
WPFileSystemFix*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,WPFileSystemFix,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,WPFileSystemFix,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,WPFileSystemFix,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,WPFileSystemFix,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
WPFileSystemFix*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,WPFileSystemFix,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
WPFileSystemFix*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,WPFileSystemFix,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
WPFileSystemFix*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,WPFileSystemFix,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,WPFileSystemFix,SOMObject,somFree)
	(this);
}


/* method: somGetClass */
M_WPFileSystemFix*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPFileSystemFix,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,WPFileSystemFix,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,WPFileSystemFix,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,WPFileSystemFix,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,WPFileSystemFix,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,WPFileSystemFix,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   WPFileSystemFix_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,WPFileSystemFix,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,WPFileSystemFix,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   WPFileSystemFix_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,WPFileSystemFix,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,WPFileSystemFix,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,WPFileSystemFix,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,WPFileSystemFix,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   WPFileSystemFix_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,WPFileSystemFix,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,WPFileSystemFix,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   WPFileSystemFix_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,WPFileSystemFix,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,WPFileSystemFix,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   WPFileSystemFix_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,WPFileSystemFix,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,WPFileSystemFix,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   WPFileSystemFix_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,WPFileSystemFix,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,WPFileSystemFix,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,WPFileSystemFix,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write a detailed description of this object
 *  and its current state.
 * 
 *  <level> indicates the nesting level for describing compound objects
 *  it must be greater than or equal to zero.  All lines in the
 *  description will be preceeded by <2*level> spaces.
 * 
 *  This routine only actually writes the data that concerns the object
 *  as a whole, such as class, and uses <somDumpSelfInt> to describe
 *  the object's current state.  This approach allows readable
 *  descriptions of compound objects to be constructed.
 * 
 *  Generally it is not necessary to override this method, if it is
 *  overriden it generally must be completely replaced.
 */
   SOM_ResolveD(this,WPFileSystemFix,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write in the current state of this object.
 *  Generally this method will need to be overridden.  When overriding
 *  it, begin by calling the parent class form of this method and then
 *  write in a description of your class's instance data. This will
 *  result in a description of all the object's instance data going
 *  from its root ancestor class to its specific class.
 */
   SOM_ResolveD(this,WPFileSystemFix,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* WPFileSystemFix */



#endif       /* SOM_WPFileSystemFix_xh */

#ifndef SOM_M_WPFileSystemFix_xh
#define SOM_M_WPFileSystemFix_xh

class M_WPFileSystemFix;

#define M_WPFileSystemFix_MajorVersion 1
#define M_WPFileSystemFix_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPFileSystem_xh
#include <wpfsys.xh>
#endif

#ifndef M_WPFileSystemFix_API
#define M_WPFileSystemFix_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPFileSystemFix is a metaclass for WPFileSystemFix. Make sure WPFileSystemFix is known.
 */
class WPFileSystemFix;


/* A procedure to create the M_WPFileSystemFix Class */
SOMEXTERN SOMClass * SOMLINK M_WPFileSystemFixNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPFileSystemFix class object, and the methods it introduces. */
SOMEXTERN struct M_WPFileSystemFixClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPFileSystemFixClassData;
#define _M_WPFileSystemFix M_WPFileSystemFixClassData.classObject

/* The API to parentMtabs for M_WPFileSystemFix, and the instance data it introduces. */
SOMEXTERN struct M_WPFileSystemFixCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPFileSystemFixCClassData;

/*
 * -- Typedefs for M_WPFileSystemFix Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPObject*   SOMLINK somTP_M_WPFileSystemFix_wpclsQueryAwakeObject(M_WPFileSystemFix *somSelf, 
		PSZ pszInputPath);
typedef somTP_M_WPFileSystemFix_wpclsQueryAwakeObject *somTD_M_WPFileSystemFix_wpclsQueryAwakeObject;
typedef WPObject*   SOMLINK somTP_M_WPFileSystemFix_wpclsFileSysExists(M_WPFileSystemFix *somSelf, 
		WPFolder* Folder, 
		PSZ pszFilename, 
		ULONG attrFile);
typedef somTP_M_WPFileSystemFix_wpclsFileSysExists *somTD_M_WPFileSystemFix_wpclsFileSysExists;
typedef WPObject*   SOMLINK somTP_M_WPFileSystemFix_wpclsQueryObjectFromPath(M_WPFileSystemFix *somSelf, 
		PSZ pszFQPath);
typedef somTP_M_WPFileSystemFix_wpclsQueryObjectFromPath *somTD_M_WPFileSystemFix_wpclsQueryObjectFromPath;
typedef PSZ   SOMLINK somTP_M_WPFileSystemFix_wpclsQueryInstanceType(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_wpclsQueryInstanceType *somTD_M_WPFileSystemFix_wpclsQueryInstanceType;
typedef PSZ   SOMLINK somTP_M_WPFileSystemFix_wpclsQueryInstanceFilter(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_wpclsQueryInstanceFilter *somTD_M_WPFileSystemFix_wpclsQueryInstanceFilter;
typedef PSZ   SOMLINK somTP_M_WPFileSystemFix_wpclsQueryInstanceClass(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_wpclsQueryInstanceClass *somTD_M_WPFileSystemFix_wpclsQueryInstanceClass;
typedef void   SOMLINK somTP_M_WPFileSystemFix_wpclsInitData(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_wpclsInitData *somTD_M_WPFileSystemFix_wpclsInitData;
typedef PSZ   SOMLINK somTP_M_WPFileSystemFix_wpclsQueryTitle(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_wpclsQueryTitle *somTD_M_WPFileSystemFix_wpclsQueryTitle;
typedef ULONG   SOMLINK somTP_M_WPFileSystemFix_wpclsQueryDetailsInfo(M_WPFileSystemFix *somSelf, 
		PCLASSFIELDINFO* ppClassFieldInfo, 
		PULONG pSize);
typedef somTP_M_WPFileSystemFix_wpclsQueryDetailsInfo *somTD_M_WPFileSystemFix_wpclsQueryDetailsInfo;
typedef void   SOMLINK somTP_M_WPFileSystemFix_wpclsQuerySearchInfo(M_WPFileSystemFix *somSelf, 
		M_WPObject** ClassExtended, 
		M_WPObject** ClassCreate, 
		PULONG pulClassCriteriaSize);
typedef somTP_M_WPFileSystemFix_wpclsQuerySearchInfo *somTD_M_WPFileSystemFix_wpclsQuerySearchInfo;
typedef BOOL   SOMLINK somTP_M_WPFileSystemFix_wpclsQueryExtendedCriteria(M_WPFileSystemFix *somSelf, 
		PSZ pszName, 
		ULONG ulSearchType, 
		PVOID pvoidExtendedCriteria);
typedef somTP_M_WPFileSystemFix_wpclsQueryExtendedCriteria *somTD_M_WPFileSystemFix_wpclsQueryExtendedCriteria;
typedef WPObject*   SOMLINK somTP_M_WPFileSystemFix_wpclsNew(M_WPFileSystemFix *somSelf, 
		PSZ pszTitle, 
		PSZ pszSetupEnv, 
		WPFolder* Folder, 
		BOOL fLock);
typedef somTP_M_WPFileSystemFix_wpclsNew *somTD_M_WPFileSystemFix_wpclsNew;
typedef WPObject*   SOMLINK somTP_M_WPFileSystemFix_wpclsObjectFromHandle(M_WPFileSystemFix *somSelf, 
		HOBJECT hObject);
typedef somTP_M_WPFileSystemFix_wpclsObjectFromHandle *somTD_M_WPFileSystemFix_wpclsObjectFromHandle;
typedef BOOL   SOMLINK somTP_M_WPFileSystemFix_wpclsQuerySettingsPageSize(M_WPFileSystemFix *somSelf, 
		PSIZEL pSizl);
typedef somTP_M_WPFileSystemFix_wpclsQuerySettingsPageSize *somTD_M_WPFileSystemFix_wpclsQuerySettingsPageSize;
typedef BOOL   SOMLINK somTP_M_WPFileSystemFix_wpclsCreateDefaultTemplates(M_WPFileSystemFix *somSelf, 
		WPObject* Folder);
typedef somTP_M_WPFileSystemFix_wpclsCreateDefaultTemplates *somTD_M_WPFileSystemFix_wpclsCreateDefaultTemplates;
typedef WPObject*   SOMLINK somTP_M_WPFileSystemFix_wpclsMakeAwake(M_WPFileSystemFix *somSelf, 
		PSZ pszTitle, 
		ULONG ulStyle, 
		HPOINTER hptrIcon, 
		POBJDATA pObjData, 
		WPFolder* Folder, 
		ULONG ulUser);
typedef somTP_M_WPFileSystemFix_wpclsMakeAwake *somTD_M_WPFileSystemFix_wpclsMakeAwake;
typedef BOOL   SOMLINK somTP_M_WPFileSystemFix_wpclsQueryDefaultHelp(M_WPFileSystemFix *somSelf, 
		PULONG pHelpPanelId, 
		PSZ pszHelpLibrary);
typedef somTP_M_WPFileSystemFix_wpclsQueryDefaultHelp *somTD_M_WPFileSystemFix_wpclsQueryDefaultHelp;
typedef ULONG   SOMLINK somTP_M_WPFileSystemFix_wpclsQueryDefaultView(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_wpclsQueryDefaultView *somTD_M_WPFileSystemFix_wpclsQueryDefaultView;
typedef PCLASSDETAILS   SOMLINK somTP_M_WPFileSystemFix_wpclsQueryDetails(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_wpclsQueryDetails *somTD_M_WPFileSystemFix_wpclsQueryDetails;
typedef WPObject*   SOMLINK somTP_M_WPFileSystemFix_wpclsQueryFolder(M_WPFileSystemFix *somSelf, 
		PSZ pszLocation, 
		BOOL fLock);
typedef somTP_M_WPFileSystemFix_wpclsQueryFolder *somTD_M_WPFileSystemFix_wpclsQueryFolder;
typedef HPOINTER   SOMLINK somTP_M_WPFileSystemFix_wpclsQueryIcon(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_wpclsQueryIcon *somTD_M_WPFileSystemFix_wpclsQueryIcon;
typedef ULONG   SOMLINK somTP_M_WPFileSystemFix_wpclsQueryStyle(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_wpclsQueryStyle *somTD_M_WPFileSystemFix_wpclsQueryStyle;
typedef void   SOMLINK somTP_M_WPFileSystemFix_wpclsUnInitData(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_wpclsUnInitData *somTD_M_WPFileSystemFix_wpclsUnInitData;
typedef BOOL   SOMLINK somTP_M_WPFileSystemFix_wpclsFindObjectFirst(M_WPFileSystemFix *somSelf, 
		PCLASS pClassList, 
		PHFIND phFind, 
		PSZ pszTitle, 
		WPFolder* Folder, 
		BOOL fSubfolders, 
		PVOID pExtendedCriteria, 
		POBJECT pBuffer, 
		PULONG pCount);
typedef somTP_M_WPFileSystemFix_wpclsFindObjectFirst *somTD_M_WPFileSystemFix_wpclsFindObjectFirst;
typedef BOOL   SOMLINK somTP_M_WPFileSystemFix_wpclsFindObjectNext(M_WPFileSystemFix *somSelf, 
		HFIND hFind, 
		POBJECT pBuffer, 
		PULONG pCount);
typedef somTP_M_WPFileSystemFix_wpclsFindObjectNext *somTD_M_WPFileSystemFix_wpclsFindObjectNext;
typedef BOOL   SOMLINK somTP_M_WPFileSystemFix_wpclsFindObjectEnd(M_WPFileSystemFix *somSelf, 
		HFIND hFind);
typedef somTP_M_WPFileSystemFix_wpclsFindObjectEnd *somTD_M_WPFileSystemFix_wpclsFindObjectEnd;
typedef BOOL   SOMLINK somTP_M_WPFileSystemFix_wpclsSetError(M_WPFileSystemFix *somSelf, 
		ULONG ulErrorId);
typedef somTP_M_WPFileSystemFix_wpclsSetError *somTD_M_WPFileSystemFix_wpclsSetError;
typedef ULONG   SOMLINK somTP_M_WPFileSystemFix_wpclsQueryError(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_wpclsQueryError *somTD_M_WPFileSystemFix_wpclsQueryError;
typedef ULONG   SOMLINK somTP_M_WPFileSystemFix_wpclsQueryIconData(M_WPFileSystemFix *somSelf, 
		PICONINFO pIconInfo);
typedef somTP_M_WPFileSystemFix_wpclsQueryIconData *somTD_M_WPFileSystemFix_wpclsQueryIconData;
typedef WPObject*   SOMLINK somTP_M_WPFileSystemFix_wpclsQueryObject(M_WPFileSystemFix *somSelf, 
		HOBJECT hObject);
typedef somTP_M_WPFileSystemFix_wpclsQueryObject *somTD_M_WPFileSystemFix_wpclsQueryObject;
typedef ULONG   SOMLINK somTP_M_WPFileSystemFix_wpclsQueryButtonAppearance(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_wpclsQueryButtonAppearance *somTD_M_WPFileSystemFix_wpclsQueryButtonAppearance;
typedef void   SOMLINK somTP_M_WPFileSystemFix_wpclsDecUsage(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_wpclsDecUsage *somTD_M_WPFileSystemFix_wpclsDecUsage;
typedef void   SOMLINK somTP_M_WPFileSystemFix_wpclsIncUsage(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_wpclsIncUsage *somTD_M_WPFileSystemFix_wpclsIncUsage;
typedef BOOL   SOMLINK somTP_M_WPFileSystemFix_wpclsInsertMultipleObjects(M_WPFileSystemFix *somSelf, 
		HWND hwndCnr, 
		PPOINTL pptlIcon, 
		PVOID* pObjectArray, 
		PVOID pRecordParent, 
		ULONG NumRecords);
typedef somTP_M_WPFileSystemFix_wpclsInsertMultipleObjects *somTD_M_WPFileSystemFix_wpclsInsertMultipleObjects;
typedef WPObject*   SOMLINK somTP_M_WPFileSystemFix_wpclsFindOneObject(M_WPFileSystemFix *somSelf, 
		HWND hwndOwner, 
		PSZ pszFindParams);
typedef somTP_M_WPFileSystemFix_wpclsFindOneObject *somTD_M_WPFileSystemFix_wpclsFindOneObject;
typedef BOOL   SOMLINK somTP_M_WPFileSystemFix_wpclsSetSettingsPageSize(M_WPFileSystemFix *somSelf, 
		PSIZEL pSizl);
typedef somTP_M_WPFileSystemFix_wpclsSetSettingsPageSize *somTD_M_WPFileSystemFix_wpclsSetSettingsPageSize;
typedef BOOL   SOMLINK somTP_M_WPFileSystemFix_wpclsSetIconData(M_WPFileSystemFix *somSelf, 
		PICONINFO pIconInfo);
typedef somTP_M_WPFileSystemFix_wpclsSetIconData *somTD_M_WPFileSystemFix_wpclsSetIconData;
typedef BOOL   SOMLINK somTP_M_WPFileSystemFix_wpclsSetIcon(M_WPFileSystemFix *somSelf, 
		HPOINTER hptrNewIcon);
typedef somTP_M_WPFileSystemFix_wpclsSetIcon *somTD_M_WPFileSystemFix_wpclsSetIcon;
typedef BOOL   SOMLINK somTP_M_WPFileSystemFix_wpclsRemoveObjects(M_WPFileSystemFix *somSelf, 
		HWND hwndCnr, 
		PVOID* pRecordArray, 
		ULONG NumRecords, 
		BOOL RemoveAll);
typedef somTP_M_WPFileSystemFix_wpclsRemoveObjects *somTD_M_WPFileSystemFix_wpclsRemoveObjects;
typedef void   SOMLINK somTP_M_WPFileSystemFix_somUninit(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_somUninit *somTD_M_WPFileSystemFix_somUninit;
typedef void   SOMLINK somTP_M_WPFileSystemFix_somClassReady(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_somClassReady *somTD_M_WPFileSystemFix_somClassReady;
typedef WPFileSystemFix*   SOMLINK somTP_M_WPFileSystemFix_somNew(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_somNew *somTD_M_WPFileSystemFix_somNew;
typedef SOMObject*   SOMLINK somTP_M_WPFileSystemFix_somRenew(M_WPFileSystemFix *somSelf, 
		void* obj);
typedef somTP_M_WPFileSystemFix_somRenew *somTD_M_WPFileSystemFix_somRenew;
typedef long   SOMLINK somTP_M_WPFileSystemFix__get_somDataAlignment(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix__get_somDataAlignment *somTD_M_WPFileSystemFix__get_somDataAlignment;
typedef SOMClass_somOffsets   SOMLINK somTP_M_WPFileSystemFix__get_somInstanceDataOffsets(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix__get_somInstanceDataOffsets *somTD_M_WPFileSystemFix__get_somInstanceDataOffsets;
typedef SOMClass_SOMClassSequence   SOMLINK somTP_M_WPFileSystemFix__get_somDirectInitClasses(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix__get_somDirectInitClasses *somTD_M_WPFileSystemFix__get_somDirectInitClasses;
typedef SOMObject*   SOMLINK somTP_M_WPFileSystemFix_somNewNoInit(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_somNewNoInit *somTD_M_WPFileSystemFix_somNewNoInit;
typedef SOMObject*   SOMLINK somTP_M_WPFileSystemFix_somRenewNoInit(M_WPFileSystemFix *somSelf, 
		void* obj);
typedef somTP_M_WPFileSystemFix_somRenewNoInit *somTD_M_WPFileSystemFix_somRenewNoInit;
typedef SOMObject*   SOMLINK somTP_M_WPFileSystemFix_somRenewNoZero(M_WPFileSystemFix *somSelf, 
		void* obj);
typedef somTP_M_WPFileSystemFix_somRenewNoZero *somTD_M_WPFileSystemFix_somRenewNoZero;
typedef SOMObject*   SOMLINK somTP_M_WPFileSystemFix_somRenewNoInitNoZero(M_WPFileSystemFix *somSelf, 
		void* obj);
typedef somTP_M_WPFileSystemFix_somRenewNoInitNoZero *somTD_M_WPFileSystemFix_somRenewNoInitNoZero;
typedef somToken   SOMLINK somTP_M_WPFileSystemFix_somAllocate(M_WPFileSystemFix *somSelf, 
		long size);
typedef somTP_M_WPFileSystemFix_somAllocate *somTD_M_WPFileSystemFix_somAllocate;
typedef void   SOMLINK somTP_M_WPFileSystemFix_somDeallocate(M_WPFileSystemFix *somSelf, 
		somToken memptr);
typedef somTP_M_WPFileSystemFix_somDeallocate *somTD_M_WPFileSystemFix_somDeallocate;
typedef void   SOMLINK somTP_M_WPFileSystemFix_somInitClass(M_WPFileSystemFix *somSelf, 
		string className, 
		SOMClass* parentClass, 
		long dataSize, 
		long maxStaticMethods, 
		long majorVersion, 
		long minorVersion);
typedef somTP_M_WPFileSystemFix_somInitClass *somTD_M_WPFileSystemFix_somInitClass;
typedef void   SOMLINK somTP_M_WPFileSystemFix_somInitMIClass(M_WPFileSystemFix *somSelf, 
		long inherit_vars, 
		string className, 
		SOMClass_SOMClassSequence* parentClasses, 
		long dataSize, 
		long dataAlignment, 
		long maxStaticMethods, 
		long majorVersion, 
		long minorVersion);
typedef somTP_M_WPFileSystemFix_somInitMIClass *somTD_M_WPFileSystemFix_somInitMIClass;
typedef somMToken   SOMLINK somTP_M_WPFileSystemFix_somAddStaticMethod(M_WPFileSystemFix *somSelf, 
		somId methodId, 
		somId methodDescriptor, 
		somMethodPtr method, 
		somMethodPtr redispatchStub, 
		somMethodPtr applyStub);
typedef somTP_M_WPFileSystemFix_somAddStaticMethod *somTD_M_WPFileSystemFix_somAddStaticMethod;
typedef void   SOMLINK somTP_M_WPFileSystemFix_somAddDynamicMethod(M_WPFileSystemFix *somSelf, 
		somId methodId, 
		somId methodDescriptor, 
		somMethodPtr method, 
		somMethodPtr applyStub);
typedef somTP_M_WPFileSystemFix_somAddDynamicMethod *somTD_M_WPFileSystemFix_somAddDynamicMethod;
typedef void   SOMLINK somTP_M_WPFileSystemFix_somOverrideSMethod(M_WPFileSystemFix *somSelf, 
		somId methodId, 
		somMethodPtr method);
typedef somTP_M_WPFileSystemFix_somOverrideSMethod *somTD_M_WPFileSystemFix_somOverrideSMethod;
typedef somMethodPtr   SOMLINK somTP_M_WPFileSystemFix_somGetApplyStub(M_WPFileSystemFix *somSelf, 
		somId methodId);
typedef somTP_M_WPFileSystemFix_somGetApplyStub *somTD_M_WPFileSystemFix_somGetApplyStub;
typedef somClassDataStructure*   SOMLINK somTP_M_WPFileSystemFix_somGetClassData(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_somGetClassData *somTD_M_WPFileSystemFix_somGetClassData;
typedef void   SOMLINK somTP_M_WPFileSystemFix_somSetClassData(M_WPFileSystemFix *somSelf, 
		somClassDataStructure* cds);
typedef somTP_M_WPFileSystemFix_somSetClassData *somTD_M_WPFileSystemFix_somSetClassData;
typedef somMethodTab*   SOMLINK somTP_M_WPFileSystemFix_somGetClassMtab(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_somGetClassMtab *somTD_M_WPFileSystemFix_somGetClassMtab;
typedef long   SOMLINK somTP_M_WPFileSystemFix_somGetInstanceOffset(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_somGetInstanceOffset *somTD_M_WPFileSystemFix_somGetInstanceOffset;
typedef long   SOMLINK somTP_M_WPFileSystemFix_somGetInstancePartSize(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_somGetInstancePartSize *somTD_M_WPFileSystemFix_somGetInstancePartSize;
typedef long   SOMLINK somTP_M_WPFileSystemFix_somGetInstanceSize(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_somGetInstanceSize *somTD_M_WPFileSystemFix_somGetInstanceSize;
typedef somDToken   SOMLINK somTP_M_WPFileSystemFix_somGetInstanceToken(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_somGetInstanceToken *somTD_M_WPFileSystemFix_somGetInstanceToken;
typedef somDToken   SOMLINK somTP_M_WPFileSystemFix_somGetMemberToken(M_WPFileSystemFix *somSelf, 
		long memberOffset, 
		somDToken instanceToken);
typedef somTP_M_WPFileSystemFix_somGetMemberToken *somTD_M_WPFileSystemFix_somGetMemberToken;
typedef boolean   SOMLINK somTP_M_WPFileSystemFix_somGetMethodData(M_WPFileSystemFix *somSelf, 
		somId methodId, 
		somMethodData* md);
typedef somTP_M_WPFileSystemFix_somGetMethodData *somTD_M_WPFileSystemFix_somGetMethodData;
typedef somMethodProc*   SOMLINK somTP_M_WPFileSystemFix_somGetRdStub(M_WPFileSystemFix *somSelf, 
		somId methodId);
typedef somTP_M_WPFileSystemFix_somGetRdStub *somTD_M_WPFileSystemFix_somGetRdStub;
typedef somId   SOMLINK somTP_M_WPFileSystemFix_somGetMethodDescriptor(M_WPFileSystemFix *somSelf, 
		somId methodId);
typedef somTP_M_WPFileSystemFix_somGetMethodDescriptor *somTD_M_WPFileSystemFix_somGetMethodDescriptor;
typedef long   SOMLINK somTP_M_WPFileSystemFix_somGetMethodIndex(M_WPFileSystemFix *somSelf, 
		somId id);
typedef somTP_M_WPFileSystemFix_somGetMethodIndex *somTD_M_WPFileSystemFix_somGetMethodIndex;
typedef somMToken   SOMLINK somTP_M_WPFileSystemFix_somGetMethodToken(M_WPFileSystemFix *somSelf, 
		somId methodId);
typedef somTP_M_WPFileSystemFix_somGetMethodToken *somTD_M_WPFileSystemFix_somGetMethodToken;
typedef string   SOMLINK somTP_M_WPFileSystemFix_somGetName(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_somGetName *somTD_M_WPFileSystemFix_somGetName;
typedef boolean   SOMLINK somTP_M_WPFileSystemFix_somGetNthMethodData(M_WPFileSystemFix *somSelf, 
		long n, 
		somMethodData* md);
typedef somTP_M_WPFileSystemFix_somGetNthMethodData *somTD_M_WPFileSystemFix_somGetNthMethodData;
typedef somId   SOMLINK somTP_M_WPFileSystemFix_somGetNthMethodInfo(M_WPFileSystemFix *somSelf, 
		long n, 
		somId* descriptor);
typedef somTP_M_WPFileSystemFix_somGetNthMethodInfo *somTD_M_WPFileSystemFix_somGetNthMethodInfo;
typedef long   SOMLINK somTP_M_WPFileSystemFix_somGetNumMethods(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_somGetNumMethods *somTD_M_WPFileSystemFix_somGetNumMethods;
typedef long   SOMLINK somTP_M_WPFileSystemFix_somGetNumStaticMethods(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_somGetNumStaticMethods *somTD_M_WPFileSystemFix_somGetNumStaticMethods;
typedef SOMClass*   SOMLINK somTP_M_WPFileSystemFix_somGetParent(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_somGetParent *somTD_M_WPFileSystemFix_somGetParent;
typedef SOMClass_SOMClassSequence   SOMLINK somTP_M_WPFileSystemFix_somGetParents(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_somGetParents *somTD_M_WPFileSystemFix_somGetParents;
typedef void   SOMLINK somTP_M_WPFileSystemFix_somGetVersionNumbers(M_WPFileSystemFix *somSelf, 
		long* majorVersion, 
		long* minorVersion);
typedef somTP_M_WPFileSystemFix_somGetVersionNumbers *somTD_M_WPFileSystemFix_somGetVersionNumbers;
typedef boolean   SOMLINK somTP_M_WPFileSystemFix_somFindMethod(M_WPFileSystemFix *somSelf, 
		somId methodId, 
		somMethodPtr* m);
typedef somTP_M_WPFileSystemFix_somFindMethod *somTD_M_WPFileSystemFix_somFindMethod;
typedef boolean   SOMLINK somTP_M_WPFileSystemFix_somFindMethodOk(M_WPFileSystemFix *somSelf, 
		somId methodId, 
		somMethodPtr* m);
typedef somTP_M_WPFileSystemFix_somFindMethodOk *somTD_M_WPFileSystemFix_somFindMethodOk;
typedef somMethodPtr   SOMLINK somTP_M_WPFileSystemFix_somFindSMethod(M_WPFileSystemFix *somSelf, 
		somId methodId);
typedef somTP_M_WPFileSystemFix_somFindSMethod *somTD_M_WPFileSystemFix_somFindSMethod;
typedef somMethodPtr   SOMLINK somTP_M_WPFileSystemFix_somFindSMethodOk(M_WPFileSystemFix *somSelf, 
		somId methodId);
typedef somTP_M_WPFileSystemFix_somFindSMethodOk *somTD_M_WPFileSystemFix_somFindSMethodOk;
typedef somMethodPtr   SOMLINK somTP_M_WPFileSystemFix_somLookupMethod(M_WPFileSystemFix *somSelf, 
		somId methodId);
typedef somTP_M_WPFileSystemFix_somLookupMethod *somTD_M_WPFileSystemFix_somLookupMethod;
typedef boolean   SOMLINK somTP_M_WPFileSystemFix_somCheckVersion(M_WPFileSystemFix *somSelf, 
		long majorVersion, 
		long minorVersion);
typedef somTP_M_WPFileSystemFix_somCheckVersion *somTD_M_WPFileSystemFix_somCheckVersion;
typedef boolean   SOMLINK somTP_M_WPFileSystemFix_somDescendedFrom(M_WPFileSystemFix *somSelf, 
		SOMClass* aClassObj);
typedef somTP_M_WPFileSystemFix_somDescendedFrom *somTD_M_WPFileSystemFix_somDescendedFrom;
typedef boolean   SOMLINK somTP_M_WPFileSystemFix_somSupportsMethod(M_WPFileSystemFix *somSelf, 
		somId mId);
typedef somTP_M_WPFileSystemFix_somSupportsMethod *somTD_M_WPFileSystemFix_somSupportsMethod;
typedef somMethodPtr   SOMLINK somTP_M_WPFileSystemFix_somDefinedMethod(M_WPFileSystemFix *somSelf, 
		somMToken method);
typedef somTP_M_WPFileSystemFix_somDefinedMethod *somTD_M_WPFileSystemFix_somDefinedMethod;
typedef void   SOMLINK somTP_M_WPFileSystemFix_somOverrideMtab(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_somOverrideMtab *somTD_M_WPFileSystemFix_somOverrideMtab;
typedef void   SOMLINK somTP_M_WPFileSystemFix_somDefaultInit(M_WPFileSystemFix *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_M_WPFileSystemFix_somDefaultInit *somTD_M_WPFileSystemFix_somDefaultInit;
typedef void   SOMLINK somTP_M_WPFileSystemFix_somDestruct(M_WPFileSystemFix *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_M_WPFileSystemFix_somDestruct *somTD_M_WPFileSystemFix_somDestruct;
typedef void   SOMLINK somTP_M_WPFileSystemFix_somDefaultCopyInit(M_WPFileSystemFix *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_M_WPFileSystemFix_somDefaultCopyInit *somTD_M_WPFileSystemFix_somDefaultCopyInit;
typedef M_WPFileSystemFix*   SOMLINK somTP_M_WPFileSystemFix_somDefaultAssign(M_WPFileSystemFix *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_M_WPFileSystemFix_somDefaultAssign *somTD_M_WPFileSystemFix_somDefaultAssign;
typedef void   SOMLINK somTP_M_WPFileSystemFix_somDefaultConstCopyInit(M_WPFileSystemFix *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_M_WPFileSystemFix_somDefaultConstCopyInit *somTD_M_WPFileSystemFix_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_M_WPFileSystemFix_somDefaultVCopyInit(M_WPFileSystemFix *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_M_WPFileSystemFix_somDefaultVCopyInit *somTD_M_WPFileSystemFix_somDefaultVCopyInit;
typedef void   SOMLINK somTP_M_WPFileSystemFix_somDefaultConstVCopyInit(M_WPFileSystemFix *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_M_WPFileSystemFix_somDefaultConstVCopyInit *somTD_M_WPFileSystemFix_somDefaultConstVCopyInit;
typedef M_WPFileSystemFix*   SOMLINK somTP_M_WPFileSystemFix_somDefaultConstAssign(M_WPFileSystemFix *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_M_WPFileSystemFix_somDefaultConstAssign *somTD_M_WPFileSystemFix_somDefaultConstAssign;
typedef M_WPFileSystemFix*   SOMLINK somTP_M_WPFileSystemFix_somDefaultVAssign(M_WPFileSystemFix *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_M_WPFileSystemFix_somDefaultVAssign *somTD_M_WPFileSystemFix_somDefaultVAssign;
typedef M_WPFileSystemFix*   SOMLINK somTP_M_WPFileSystemFix_somDefaultConstVAssign(M_WPFileSystemFix *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_M_WPFileSystemFix_somDefaultConstVAssign *somTD_M_WPFileSystemFix_somDefaultConstVAssign;
typedef void   SOMLINK somTP_M_WPFileSystemFix_somInit(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_somInit *somTD_M_WPFileSystemFix_somInit;
typedef void   SOMLINK somTP_M_WPFileSystemFix_somFree(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_somFree *somTD_M_WPFileSystemFix_somFree;
typedef SOMClass*   SOMLINK somTP_M_WPFileSystemFix_somGetClass(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_somGetClass *somTD_M_WPFileSystemFix_somGetClass;
typedef string   SOMLINK somTP_M_WPFileSystemFix_somGetClassName(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_somGetClassName *somTD_M_WPFileSystemFix_somGetClassName;
typedef long   SOMLINK somTP_M_WPFileSystemFix_somGetSize(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_somGetSize *somTD_M_WPFileSystemFix_somGetSize;
typedef boolean   SOMLINK somTP_M_WPFileSystemFix_somIsA(M_WPFileSystemFix *somSelf, 
		SOMClass* aClassObj);
typedef somTP_M_WPFileSystemFix_somIsA *somTD_M_WPFileSystemFix_somIsA;
typedef boolean   SOMLINK somTP_M_WPFileSystemFix_somIsInstanceOf(M_WPFileSystemFix *somSelf, 
		SOMClass* aClassObj);
typedef somTP_M_WPFileSystemFix_somIsInstanceOf *somTD_M_WPFileSystemFix_somIsInstanceOf;
typedef boolean   SOMLINK somTP_M_WPFileSystemFix_somRespondsTo(M_WPFileSystemFix *somSelf, 
		somId mId);
typedef somTP_M_WPFileSystemFix_somRespondsTo *somTD_M_WPFileSystemFix_somRespondsTo;
typedef boolean   SOMLINK somTP_M_WPFileSystemFix_somDispatch(M_WPFileSystemFix *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_M_WPFileSystemFix_somDispatch *somTD_M_WPFileSystemFix_somDispatch;
typedef boolean   SOMLINK somTP_M_WPFileSystemFix_somClassDispatch(M_WPFileSystemFix *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_M_WPFileSystemFix_somClassDispatch *somTD_M_WPFileSystemFix_somClassDispatch;
typedef boolean   SOMLINK somTP_M_WPFileSystemFix_somCastObj(M_WPFileSystemFix *somSelf, 
		SOMClass* cls);
typedef somTP_M_WPFileSystemFix_somCastObj *somTD_M_WPFileSystemFix_somCastObj;
typedef boolean   SOMLINK somTP_M_WPFileSystemFix_somResetObj(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_somResetObj *somTD_M_WPFileSystemFix_somResetObj;
typedef void   SOMLINK somTP_M_WPFileSystemFix_somDispatchV(M_WPFileSystemFix *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_M_WPFileSystemFix_somDispatchV *somTD_M_WPFileSystemFix_somDispatchV;
typedef long   SOMLINK somTP_M_WPFileSystemFix_somDispatchL(M_WPFileSystemFix *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_M_WPFileSystemFix_somDispatchL *somTD_M_WPFileSystemFix_somDispatchL;
typedef void*   SOMLINK somTP_M_WPFileSystemFix_somDispatchA(M_WPFileSystemFix *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_M_WPFileSystemFix_somDispatchA *somTD_M_WPFileSystemFix_somDispatchA;
typedef double   SOMLINK somTP_M_WPFileSystemFix_somDispatchD(M_WPFileSystemFix *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_M_WPFileSystemFix_somDispatchD *somTD_M_WPFileSystemFix_somDispatchD;
typedef SOMObject*   SOMLINK somTP_M_WPFileSystemFix_somPrintSelf(M_WPFileSystemFix *somSelf);
typedef somTP_M_WPFileSystemFix_somPrintSelf *somTD_M_WPFileSystemFix_somPrintSelf;
typedef void   SOMLINK somTP_M_WPFileSystemFix_somDumpSelf(M_WPFileSystemFix *somSelf, 
		long level);
typedef somTP_M_WPFileSystemFix_somDumpSelf *somTD_M_WPFileSystemFix_somDumpSelf;
typedef void   SOMLINK somTP_M_WPFileSystemFix_somDumpSelfInt(M_WPFileSystemFix *somSelf, 
		long level);
typedef somTP_M_WPFileSystemFix_somDumpSelfInt *somTD_M_WPFileSystemFix_somDumpSelfInt;
}

#endif /* M_WPFileSystemFix_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPFileSystemFix
 */
class M_WPFileSystemFix : public M_WPFileSystem
{
public:

// M_WPFileSystemFix::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPFileSystemFix) M_WPFileSystemFixNewClass(M_WPFileSystemFix_MajorVersion,M_WPFileSystemFix_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPFileSystemFix,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPFileSystemFix));
}

// M_WPFileSystemFix::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

M_WPFileSystemFix& operator=(M_WPFileSystemFix& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPFileSystemFix()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPFileSystemFixCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPFileSystemFix(M_WPFileSystemFix* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPFileSystemFixCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
M_WPFileSystemFix(const M_WPFileSystemFix* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPFileSystemFixCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/*
 * Reintroduce inherited methods
 */

/* method: wpclsQueryAwakeObject */
WPObject*   wpclsQueryAwakeObject(PSZ pszInputPath)
{
   return SOM_ResolveD(this,M_WPFileSystemFix,M_WPFileSystem,wpclsQueryAwakeObject)
	(this,pszInputPath);
}


/* method: wpclsFileSysExists */
WPObject*   wpclsFileSysExists(WPFolder* Folder, 
		PSZ pszFilename, 
		ULONG attrFile)
{
   return SOM_ResolveD(this,M_WPFileSystemFix,M_WPFileSystem,wpclsFileSysExists)
	(this,Folder,pszFilename,attrFile);
}


/* method: wpclsQueryObjectFromPath */
WPObject*   wpclsQueryObjectFromPath(PSZ pszFQPath)
{
   return SOM_ResolveD(this,M_WPFileSystemFix,M_WPFileSystem,wpclsQueryObjectFromPath)
	(this,pszFQPath);
}


/* method: wpclsQueryInstanceType */
PSZ   wpclsQueryInstanceType()
{
   return SOM_ResolveD(this,M_WPFileSystemFix,M_WPFileSystem,wpclsQueryInstanceType)
	(this);
}


/* method: wpclsQueryInstanceFilter */
PSZ   wpclsQueryInstanceFilter()
{
   return SOM_ResolveD(this,M_WPFileSystemFix,M_WPFileSystem,wpclsQueryInstanceFilter)
	(this);
}


/* method: wpclsQueryInstanceClass */
PSZ   wpclsQueryInstanceClass()
{
   return SOM_ResolveD(this,M_WPFileSystemFix,M_WPFileSystem,wpclsQueryInstanceClass)
	(this);
}


/* method: wpclsInitData */
void   wpclsInitData()
{
   SOM_ResolveD(this,M_WPFileSystemFix,M_WPObject,wpclsInitData)
	(this);
}


/* method: wpclsQueryTitle */
PSZ   wpclsQueryTitle()
{
   return SOM_ResolveD(this,M_WPFileSystemFix,M_WPObject,wpclsQueryTitle)
	(this);
}


/* method: wpclsQueryDetailsInfo */
ULONG   wpclsQueryDetailsInfo(PCLASSFIELDINFO* ppClassFieldInfo, 
		PULONG pSize)
{
   return SOM_ResolveD(this,M_WPFileSystemFix,M_WPObject,wpclsQueryDetailsInfo)
	(this,ppClassFieldInfo,pSize);
}


/* method: wpclsQuerySearchInfo */
void   wpclsQuerySearchInfo(M_WPObject** ClassExtended, 
		M_WPObject** ClassCreate, 
		PULONG pulClassCriteriaSize)
{
   SOM_ResolveD(this,M_WPFileSystemFix,M_WPObject,wpclsQuerySearchInfo)
	(this,ClassExtended,ClassCreate,pulClassCriteriaSize);
}


/* method: wpclsQueryExtendedCriteria */
BOOL   wpclsQueryExtendedCriteria(PSZ pszName, 
		ULONG ulSearchType, 
		PVOID pvoidExtendedCriteria)
{
   return SOM_ResolveD(this,M_WPFileSystemFix,M_WPObject,wpclsQueryExtendedCriteria)
	(this,pszName,ulSearchType,pvoidExtendedCriteria);
}


/* method: wpclsNew */
WPObject*   wpclsNew(PSZ pszTitle, 
		PSZ pszSetupEnv, 
		WPFolder* Folder, 
		BOOL fLock)
{
   return SOM_ResolveD(this,M_WPFileSystemFix,M_WPObject,wpclsNew)
	(this,pszTitle,pszSetupEnv,Folder,fLock);
}


/* method: wpclsObjectFromHandle */
WPObject*   wpclsObjectFromHandle(HOBJECT hObject)
{
   return SOM_ResolveD(this,M_WPFileSystemFix,M_WPObject,wpclsObjectFromHandle)
	(this,hObject);
}


/* method: wpclsQuerySettingsPageSize */
BOOL   wpclsQuerySettingsPageSize(PSIZEL pSizl)
{
   return SOM_ResolveD(this,M_WPFileSystemFix,M_WPObject,wpclsQuerySettingsPageSize)
	(this,pSizl);
}


/* method: wpclsCreateDefaultTemplates */
BOOL   wpclsCreateDefaultTemplates(WPObject* Folder)
{
   return SOM_ResolveD(this,M_WPFileSystemFix,M_WPObject,wpclsCreateDefaultTemplates)
	(this,Folder);
}


/* method: wpclsMakeAwake */
WPObject*   wpclsMakeAwake(PSZ pszTitle, 
		ULONG ulStyle, 
		HPOINTER hptrIcon, 
		POBJDATA pObjData, 
		WPFolder* Folder, 
		ULONG ulUser)
{
   return SOM_ResolveD(this,M_WPFileSystemFix,M_WPObject,wpclsMakeAwake)
	(this,pszTitle,ulStyle,hptrIcon,pObjData,Folder,ulUser);
}


/* method: wpclsQueryDefaultHelp */
BOOL   wpclsQueryDefaultHelp(PULONG pHelpPanelId, 
		PSZ pszHelpLibrary)
{
   return SOM_ResolveD(this,M_WPFileSystemFix,M_WPObject,wpclsQueryDefaultHelp)
	(this,pHelpPanelId,pszHelpLibrary);
}


/* method: wpclsQueryDefaultView */
ULONG   wpclsQueryDefaultView()
{
   return SOM_ResolveD(this,M_WPFileSystemFix,M_WPObject,wpclsQueryDefaultView)
	(this);
}


/* method: wpclsQueryDetails */
PCLASSDETAILS   wpclsQueryDetails()
{
   return SOM_ResolveD(this,M_WPFileSystemFix,M_WPObject,wpclsQueryDetails)
	(this);
}


/* method: wpclsQueryFolder */
WPObject*   wpclsQueryFolder(PSZ pszLocation, 
		BOOL fLock)
{
   return SOM_ResolveD(this,M_WPFileSystemFix,M_WPObject,wpclsQueryFolder)
	(this,pszLocation,fLock);
}


/* method: wpclsQueryIcon */
HPOINTER   wpclsQueryIcon()
{
   return SOM_ResolveD(this,M_WPFileSystemFix,M_WPObject,wpclsQueryIcon)
	(this);
}


/* method: wpclsQueryStyle */
ULONG   wpclsQueryStyle()
{
   return SOM_ResolveD(this,M_WPFileSystemFix,M_WPObject,wpclsQueryStyle)
	(this);
}


/* method: wpclsUnInitData */
void   wpclsUnInitData()
{
   SOM_ResolveD(this,M_WPFileSystemFix,M_WPObject,wpclsUnInitData)
	(this);
}


/* method: wpclsFindObjectFirst */
BOOL   wpclsFindObjectFirst(PCLASS pClassList, 
		PHFIND phFind, 
		PSZ pszTitle, 
		WPFolder* Folder, 
		BOOL fSubfolders, 
		PVOID pExtendedCriteria, 
		POBJECT pBuffer, 
		PULONG pCount)
{
   return SOM_ResolveD(this,M_WPFileSystemFix,M_WPObject,wpclsFindObjectFirst)
	(this,pClassList,phFind,pszTitle,Folder,fSubfolders,pExtendedCriteria,pBuffer,pCount);
}


/* method: wpclsFindObjectNext */
BOOL   wpclsFindObjectNext(HFIND hFind, 
		POBJECT pBuffer, 
		PULONG pCount)
{
   return SOM_ResolveD(this,M_WPFileSystemFix,M_WPObject,wpclsFindObjectNext)
	(this,hFind,pBuffer,pCount);
}


/* method: wpclsFindObjectEnd */
BOOL   wpclsFindObjectEnd(HFIND hFind)
{
   return SOM_ResolveD(this,M_WPFileSystemFix,M_WPObject,wpclsFindObjectEnd)
	(this,hFind);
}


/* method: wpclsSetError */
BOOL   wpclsSetError(ULONG ulErrorId)
{
   return SOM_ResolveD(this,M_WPFileSystemFix,M_WPObject,wpclsSetError)
	(this,ulErrorId);
}


/* method: wpclsQueryError */
ULONG   wpclsQueryError()
{
   return SOM_ResolveD(this,M_WPFileSystemFix,M_WPObject,wpclsQueryError)
	(this);
}


/* method: wpclsQueryIconData */
ULONG   wpclsQueryIconData(PICONINFO pIconInfo)
{
   return SOM_ResolveD(this,M_WPFileSystemFix,M_WPObject,wpclsQueryIconData)
	(this,pIconInfo);
}


/* method: wpclsQueryObject */
WPObject*   wpclsQueryObject(HOBJECT hObject)
{
   return SOM_ResolveD(this,M_WPFileSystemFix,M_WPObject,wpclsQueryObject)
	(this,hObject);
}


/* method: wpclsQueryButtonAppearance */
ULONG   wpclsQueryButtonAppearance()
{
   return SOM_ResolveD(this,M_WPFileSystemFix,M_WPObject,wpclsQueryButtonAppearance)
	(this);
}


/* method: wpclsDecUsage */
void   wpclsDecUsage()
{
   SOM_ResolveD(this,M_WPFileSystemFix,M_WPObject,wpclsDecUsage)
	(this);
}


/* method: wpclsIncUsage */
void   wpclsIncUsage()
{
   SOM_ResolveD(this,M_WPFileSystemFix,M_WPObject,wpclsIncUsage)
	(this);
}


/* method: wpclsInsertMultipleObjects */
BOOL   wpclsInsertMultipleObjects(HWND hwndCnr, 
		PPOINTL pptlIcon, 
		PVOID* pObjectArray, 
		PVOID pRecordParent, 
		ULONG NumRecords)
{
   return SOM_ResolveD(this,M_WPFileSystemFix,M_WPObject,wpclsInsertMultipleObjects)
	(this,hwndCnr,pptlIcon,pObjectArray,pRecordParent,NumRecords);
}


/* method: wpclsFindOneObject */
WPObject*   wpclsFindOneObject(HWND hwndOwner, 
		PSZ pszFindParams)
{
   return SOM_ResolveD(this,M_WPFileSystemFix,M_WPObject,wpclsFindOneObject)
	(this,hwndOwner,pszFindParams);
}


/* method: wpclsSetSettingsPageSize */
BOOL   wpclsSetSettingsPageSize(PSIZEL pSizl)
{
   return SOM_ResolveD(this,M_WPFileSystemFix,M_WPObject,wpclsSetSettingsPageSize)
	(this,pSizl);
}


/* method: wpclsSetIconData */
BOOL   wpclsSetIconData(PICONINFO pIconInfo)
{
   return SOM_ResolveD(this,M_WPFileSystemFix,M_WPObject,wpclsSetIconData)
	(this,pIconInfo);
}


/* method: wpclsSetIcon */
BOOL   wpclsSetIcon(HPOINTER hptrNewIcon)
{
   return SOM_ResolveD(this,M_WPFileSystemFix,M_WPObject,wpclsSetIcon)
	(this,hptrNewIcon);
}


/* method: wpclsRemoveObjects */
BOOL   wpclsRemoveObjects(HWND hwndCnr, 
		PVOID* pRecordArray, 
		ULONG NumRecords, 
		BOOL RemoveAll)
{
   return SOM_ResolveD(this,M_WPFileSystemFix,M_WPObject,wpclsRemoveObjects)
	(this,hwndCnr,pRecordArray,NumRecords,RemoveAll);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,M_WPFileSystemFix,SOMObject,somUninit)
	(this);
}


/* method: somClassReady */
void   somClassReady()
{
   SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somClassReady)
	(this);
}


/* method: somNew */
WPFileSystemFix*  somNew()
{
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somNew)
	(this);
}


/* method: somRenew */
SOMObject*   somRenew(void* obj)
{
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somRenew)
	(this,obj);
}


/* method: _get_somDataAlignment */
long   _get_somDataAlignment()
{
/*
 *  The alignment required for the instance data structure
 *  introduced by the receiving class.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,_get_somDataAlignment)
	(this);
}


/* nonstatic method: _get_somInstanceDataOffsets */
SOMClass_somOffsets   _get_somInstanceDataOffsets()
{
/*
 *  A sequence of the instance data offsets for all classes used in
 *  the derivation of the receiving class (including the receiver).
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,_get_somInstanceDataOffsets)
	(this);
}


/* nonstatic method: _get_somDirectInitClasses */
SOMClass_SOMClassSequence   _get_somDirectInitClasses()
{
/*
 *  The ancestors whose initializers the receiving
 *  class wants to directly invoke.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,_get_somDirectInitClasses)
	(this);
}


/* method: somNewNoInit */
SOMObject*   somNewNoInit()
{
/*
 *  Equivalent to somNew except that somDefaultInit is not called.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somNewNoInit)
	(this);
}


/* method: somRenewNoInit */
SOMObject*   somRenewNoInit(void* obj)
{
/*
 *  Equivalent to somRenew except that somDefaultInit is not called.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somRenewNoInit)
	(this,obj);
}


/* method: somRenewNoZero */
SOMObject*   somRenewNoZero(void* obj)
{
/*
 *  Equivalent to somRenew except that memory is not zeroed out.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somRenewNoZero)
	(this,obj);
}


/* method: somRenewNoInitNoZero */
SOMObject*   somRenewNoInitNoZero(void* obj)
{
/*
 *  The purpose of this method is to load an object's method table.
 *  The SOM API requires that somRenewNoInitNoZero always be
 *  called when creating a new object whose metaclass is not SOMClass.
 *  This is because metaclasses must be guaranteed that they can use
 *  somRenewNoInitNoZero to track object creation if this is desired.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somRenewNoInitNoZero)
	(this,obj);
}


/* nonstatic method: somAllocate */
somToken   somAllocate(long size)
{
/*
 *  Allocates memory to hold an object and returns a pointer to this memory.
 *  This is a nonstatic method, and cannot be overridden. The default
 *  implementation calls SOMMalloc, but a class designer can specify a
 *  different implementation using the somallocate modifier in IDL. The
 *  allocator takes the same parameters as this method.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somAllocate)
	(this,size);
}


/* nonstatic method: somDeallocate */
void   somDeallocate(somToken memptr)
{
/*
 *  Zeros out the method table pointer stored in the word pointed to by
 *  memptr, and then deallocates the block of memory pointed to by memptr.
 *  This is a nonstatic method and cannot be overridden. The default
 *  deallocator called is SOMFree, but a class designer can specify a
 *  different deallocator using the somdeallocate modifier in IDL. The
 *  deallocator takes a char* (memptr) and a long (size) as arguments.
 */
   SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somDeallocate)
	(this,memptr);
}


/* method: somInitClass */
void   somInitClass(string className, 
		SOMClass* parentClass, 
		long dataSize, 
		long maxStaticMethods, 
		long majorVersion, 
		long minorVersion)
{
/*
 *  somInitClass is obsolete, and should no longer be used. The SOM 2.0
 *  kernel provides special handling for redispatch stubs in the case
 *  of SOM 1.0 classes, and use of this method is what tells the kernel
 *  that old-style redispatch stubs will be registered.
 */
   SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somInitClass)
	(this,className,parentClass,dataSize,maxStaticMethods,majorVersion,minorVersion);
}


/* method: somInitMIClass */
void   somInitMIClass(long inherit_vars, 
		string className, 
		SOMClass_SOMClassSequence* parentClasses, 
		long dataSize, 
		long dataAlignment, 
		long maxStaticMethods, 
		long majorVersion, 
		long minorVersion)
{
/*
 *  somInitMIClass implements the second phase of dynamic class creation:
 *  inheritance of interface and possibly implementation (instance
 *  variables) by suitable initialization of <self> (a class object).
 * 
 *  For somInitMIClass, the inherit_vars argument controls whether abstract
 *  or implementation inheritance is used. Inherit_vars is a 32 bit
 *  bit-vector. Implementation is inherited from parent i iff the bit
 *  1<<i is on, or i>=32.
 *  On a class-by-class basis, for each class ancestor, implementation
 *  inheritance always takes precidence over abstract inheritance. This is
 *  necessary to guarantee that procedures supporting parent method calls
 *  (available on non-abstract parents) are always supported by parent
 *  instance variables.
 * 
 *  <className> is a string containing the class name. A copy is made, so
 *  the string may be freed upon return to the caller if this is desired.
 * 
 *  <parentClasses> is a SOMClassSequence containing pointers to the
 *  parent classes. somInitMIClass makes a copy of this, so it may
 *  be freed upon return to the caller if this is desired.
 * 
 *  <dataSize> is the space needed for the instance variables
 *  introduced by this class.
 * 
 *  <dataAlignment> specifies the desired byte alignment for instance
 *  data introduced by this class. A value of 0 selects a system-wide default;
 *  any other argument is taken as the desired byte alignment multiple. Thus,
 *  for example, even if a byte multiple of 8 is needed for double precision
 *  values on a given system (so 8 is the default), a class whose instance data
 *  doesn't require this can indicate otherwise. If A is the next memory
 *  address available for holding instance data, the address that will be
 *  used is A + (A mod byte-alignment).
 * 
 *  <maxStaticMethods> is the maximum number of static methods that will be
 *  added to the initialized class using addStaticMethod.
 * 
 *  <majorVersion> indicates the major version number for this
 *  implementation of the class definition, and <minorVersion>
 *  indicates the minor version number.
 */
   SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somInitMIClass)
	(this,inherit_vars,className,parentClasses,dataSize,dataAlignment,maxStaticMethods,majorVersion,minorVersion);
}


/* method: somAddStaticMethod */
somMToken   somAddStaticMethod(somId methodId, 
		somId methodDescriptor, 
		somMethodPtr method, 
		somMethodPtr redispatchStub, 
		somMethodPtr applyStub)
{
/*
 *  Adds the indicated method, creating and returning a new method token.
 * 
 *  <methodDescriptor> is the somId for an identifier that can be used
 *  to access signature information about the method from an interface
 *  repository.
 * 
 *  <method> is the actual method procedure for this method
 * 
 *  <redispatchStub> is a procedure with the same calling sequence as
 *  <method> that invokes somDispatch for the method.
 * 
 *  <applyStub> is a procedure used to support somApply.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somAddStaticMethod)
	(this,methodId,methodDescriptor,method,redispatchStub,applyStub);
}


/* method: somAddDynamicMethod */
void   somAddDynamicMethod(somId methodId, 
		somId methodDescriptor, 
		somMethodPtr method, 
		somMethodPtr applyStub)
{
/*
 *  Adds the indicated method to the class's name lookup list.
 *  If this happens to override a static method then this operation is
 *  equivalent to <somOverrideSMethod> and the <methodDescriptor> and
 *  <applyStub> arguments are ignored (the overridden method's values
 *  will be used).
 * 
 *  <methodDescriptor> is the somId for an identifier that can be used
 *  to access signature information about the method from an interface
 *  repository.
 * 
 *  <method> is the actual method procedure for this method
 * 
 *  <applyStub> is a procedure that takes a standard variable argument
 *  list data structure applies it to its target object by calling
 *  <method> with arguments derived from the data structure.  Its
 *  calling sequence is the same as the calling sequence of the
 *  dispatch methods defined in SOMObject.  This stub is used in the
 *  support of the dispatch methods used in some classes.  In classes
 *  where the dispatch functions do not need such a function this
 *  parameter may be null.
 */
   SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somAddDynamicMethod)
	(this,methodId,methodDescriptor,method,applyStub);
}


/* method: somOverrideSMethod */
void   somOverrideSMethod(somId methodId, 
		somMethodPtr method)
{
/*
 *  This method can be used instead of <somAddStaticMethod> or
 *  <somAddDynamicMethod> when it is known that the class' parent
 *  class already supports this method.  This call does not require the
 *  method descriptor and stub methods that the others do.
 */
   SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somOverrideSMethod)
	(this,methodId,method);
}


/* method: somGetApplyStub */
somMethodPtr   somGetApplyStub(somId methodId)
{
/*
 *  Returns the apply stub associated with the specified method,
 *  if one exists; otherwise NULL is returned. This method is obsolete,
 *  and retained for binary compatability. In SOMr2, users never access
 *  apply stubs directly; The function somApply is used to invoke apply
 *  stubs. See somApply documentation for further information on apply
 *  stubs, and see somAddStaticMethod documentation for information
 *  on how apply stubs are registered by class implementations.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somGetApplyStub)
	(this,methodId);
}


/* method: somGetClassData */
somClassDataStructure*   somGetClassData()
{
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somGetClassData)
	(this);
}


/* method: somSetClassData */
void   somSetClassData(somClassDataStructure* cds)
{
/*
 *  The class' pointer to the static <className>ClassData structure.
 */
   SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somSetClassData)
	(this,cds);
}


/* method: somGetClassMtab */
somMethodTab*   somGetClassMtab()
{
/*
 *  A pointer to the method table used by instances of this class. This
 *  method was misnamed; it should have been called somGetInstanceMtab.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somGetClassMtab)
	(this);
}


/* method: somGetInstanceOffset */
long   somGetInstanceOffset()
{
/*
 *  Returns the offset of instance data introduced by the receiver in
 *  an instance of the receiver. This method is obsolete and not useful in
 *  multiple-inheritance situations. The attribute somInstanceDataOffsets
 *  replaces this method.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somGetInstanceOffset)
	(this);
}


/* method: somGetInstancePartSize */
long   somGetInstancePartSize()
{
/*
 *  The size in bytes of the instance data introduced by the receiving
 *  class.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somGetInstancePartSize)
	(this);
}


/* method: somGetInstanceSize */
long   somGetInstanceSize()
{
/*
 *  The total size of an instance of the receiving class.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somGetInstanceSize)
	(this);
}


/* method: somGetInstanceToken */
somDToken   somGetInstanceToken()
{
/*
 *  A data token that identifies the introduced portion of this class
 *  within itself or any derived class.  This token can be subsequently
 *  passed to the run-time somDataResolve function to locate the instance
 *  data introduced by this class in any object derived from this class.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somGetInstanceToken)
	(this);
}


/* method: somGetMemberToken */
somDToken   somGetMemberToken(long memberOffset, 
		somDToken instanceToken)
{
/*
 *  Returns a data token that for the data member at offset
 *  "memberOffset" within the introduced portion of the class identified
 *  by instanceToken.  The instance token must have been obtained from a
 *  previous invocation of somGetInstanceToken.  The returned member
 *  token can be subsequently passed to the run-time somDataResolve
 *  function to locate the data member.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somGetMemberToken)
	(this,memberOffset,instanceToken);
}


/* method: somGetMethodData */
boolean   somGetMethodData(somId methodId, 
		somMethodData* md)
{
/*
 *  If a method with id <methodId> is supported by the target class,
 *  the structure pointed to by <md> is loaded with method information
 *  and the value 1 is returned. In this case, if the method is not
 *  dynamic, md->method is loaded with the result of somClassResolve on
 *  the target class for the method. If the method is not supported,
 *  md->id is loaded with 0, and the value 0 is returned.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somGetMethodData)
	(this,methodId,md);
}


/* method: somGetRdStub */
somMethodProc*   somGetRdStub(somId methodId)
{
/*
 *  Returns a redispatch stub for the indicated method, if possible.
 *  If not possible (because a valid redispatch stub has not been
 *  registered, and there is insufficient information to dynamically
 *  construct one), then a NULL is returned.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somGetRdStub)
	(this,methodId);
}


/* method: somGetMethodDescriptor */
somId   somGetMethodDescriptor(somId methodId)
{
/*
 *  Returns the method descriptor for the indicated method.    If
 *  this object does not support the indicated method then NULL is
 *  returned.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somGetMethodDescriptor)
	(this,methodId);
}


/* method: somGetMethodIndex */
long   somGetMethodIndex(somId id)
{
/*
 *  Returns the index for the specified method. (A number that may
 *  change if any methods are added or deleted to this class object or
 *  any of its ancestors).  This number is the basis for other calls to
 *  get info about the method. Indexes start at 0. A -1 is returned if
 *  the method cannot be found.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somGetMethodIndex)
	(this,id);
}


/* method: somGetMethodToken */
somMToken   somGetMethodToken(somId methodId)
{
/*
 *  Returns the specified method's access token. This token can then
 *  be passed to method resolution routines, which use the token
 *  to select a method pointer from a method table.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somGetMethodToken)
	(this,methodId);
}


/* method: somGetName */
string   somGetName()
{
/*
 *  This object's class name as a NULL terminated string.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somGetName)
	(this);
}


/* method: somGetNthMethodData */
boolean   somGetNthMethodData(long n, 
		somMethodData* md)
{
/*
 *  loads *md with the method data associated with the the nth method,
 *  or NULL if there is no such method. Returns true is successful;
 *  false otherwise.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somGetNthMethodData)
	(this,n,md);
}


/* method: somGetNthMethodInfo */
somId   somGetNthMethodInfo(long n, 
		somId* descriptor)
{
/*
 *  Returns the id of the <n>th method if one exists and NULL
 *  otherwise.
 * 
 *  The ordering of the methods is unpredictable, but will not change
 *  unless some change is made to the class or one of its ancestor classes.
 * 
 *  See CORBA documentation for info on method descriptors.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somGetNthMethodInfo)
	(this,n,descriptor);
}


/* method: somGetNumMethods */
long   somGetNumMethods()
{
/*
 *  The number of methods currently supported by this class,
 *  including inherited methods (both static and dynamic).
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somGetNumMethods)
	(this);
}


/* method: somGetNumStaticMethods */
long   somGetNumStaticMethods()
{
/*
 *  The number of static methods that this class has.  Can
 *  be used by a child class when initializing its method table.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somGetNumStaticMethods)
	(this);
}


/* method: somGetParent */
SOMClass*   somGetParent()
{
/*
 *  Returns the parent class of self (along its "left-hand" derivation
 *  path), if one exists and NULL otherwise.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somGetParent)
	(this);
}


/* method: somGetParents */
SOMClass_SOMClassSequence   somGetParents()
{
/*
 *  The parent classes of self.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somGetParents)
	(this);
}


/* method: somGetVersionNumbers */
void   somGetVersionNumbers(long* majorVersion, 
		long* minorVersion)
{
/*
 *  Returns the class' major and minor version numbers in the corresponding
 *  output parameters.
 */
   SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somGetVersionNumbers)
	(this,majorVersion,minorVersion);
}


/* method: somFindMethod */
boolean   somFindMethod(somId methodId, 
		somMethodPtr* m)
{
/*
 *  Finds the method procedure associated with <methodId> for this
 *  class and sets <m> to it.  1 (true) is returned when the
 *  method procedure is a static method and 0 (false) is returned
 *  when the method procedure is dynamic method.
 * 
 *  If the class does not support the specified method then
 *  <m> is set to NULL and the return value is meaningless.
 * 
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somFindMethod)
	(this,methodId,m);
}


/* method: somFindMethodOk */
boolean   somFindMethodOk(somId methodId, 
		somMethodPtr* m)
{
/*
 *  Just like <somFindMethod> except that if the method is not
 *  supported then an error is raised and execution is halted.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somFindMethodOk)
	(this,methodId,m);
}


/* method: somFindSMethod */
somMethodPtr   somFindSMethod(somId methodId)
{
/*
 *  Finds the indicated method, which must be a static method supported
 *  by this class, and returns a pointer to its method procedure.
 *  If the method is not supported by the receiver (as a static method
 *  or at all) then a NULL pointer is returned.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somFindSMethod)
	(this,methodId);
}


/* method: somFindSMethodOk */
somMethodPtr   somFindSMethodOk(somId methodId)
{
/*
 *  Uses <somFindSMethod>, and raises an error if the result is NULL.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somFindSMethodOk)
	(this,methodId);
}


/* method: somLookupMethod */
somMethodPtr   somLookupMethod(somId methodId)
{
/*
 *  Like <somFindSMethodOK>, but without restriction to static methods.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somLookupMethod)
	(this,methodId);
}


/* method: somCheckVersion */
boolean   somCheckVersion(long majorVersion, 
		long minorVersion)
{
/*
 *  Returns 1 (true) if the implementation of this class is
 *  compatible with the specified major and minor version number and
 *  false (0) otherwise.  An implementation is compatible with the
 *  specified version numbers if it has the same major version number
 *  and a minor version number that is equal to or greater than
 *  <minorVersion>.    The major, minor version number pair (0,0) is
 *  considered to match any version.  This method is usually called
 *  immediately after creating the class object to verify that a
 *  dynamically loaded class definition is compatible with a using
 *  application.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somCheckVersion)
	(this,majorVersion,minorVersion);
}


/* method: somDescendedFrom */
boolean   somDescendedFrom(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if <self> is a descendent class of <aClassObj> and
 *  0 (false) otherwise.  Note: a class object is considered to be
 *  descended itself for the purposes of this method.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somDescendedFrom)
	(this,aClassObj);
}


/* method: somSupportsMethod */
boolean   somSupportsMethod(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method is supported by this
 *  class and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somSupportsMethod)
	(this,mId);
}


/* method: somDefinedMethod */
somMethodPtr   somDefinedMethod(somMToken method)
{
/*
 *  if the receiving class either introduces or overrides the
 *  indicated method, then its somMethodPtr is returned, otherwise
 *  NULL is returned.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somDefinedMethod)
	(this,method);
}


/* method: somOverrideMtab */
void   somOverrideMtab()
{
/*
 *  Overrides the method table pointers to point to the redispatch stubs.
 *  All the methods except somDispatch methods are overriden.
 */
   SOM_ResolveD(this,M_WPFileSystemFix,SOMClass,somOverrideMtab)
	(this);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
/*
 *  A default initializer for a SOM object. Passing a null ctrl
 *  indicates to the receiver that its class is the class of the
 *  object being initialized, whereby the initializer will determine
 *  an appropriate control structure.
 */
   SOM_ResolveD(this,M_WPFileSystemFix,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
/*
 *  The default destructor for a SOM object. A nonzero <doFree>
 *  indicates that the object storage should be freed by the
 *  object's class (via somDeallocate) after uninitialization.
 *  As with somDefaultInit, a null ctrl can be passed.
 */
   SOM_ResolveD(this,M_WPFileSystemFix,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,M_WPFileSystemFix,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
M_WPFileSystemFix*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,M_WPFileSystemFix,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,M_WPFileSystemFix,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,M_WPFileSystemFix,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
M_WPFileSystemFix*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
M_WPFileSystemFix*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
M_WPFileSystemFix*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
/*
 *  Obsolete but still supported. Override somDefaultInit instead of somInit.
 */
   SOM_ResolveD(this,M_WPFileSystemFix,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,M_WPFileSystemFix,SOMObject,somFree)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   M_WPFileSystemFix_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,M_WPFileSystemFix,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,M_WPFileSystemFix,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   M_WPFileSystemFix_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,M_WPFileSystemFix,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,M_WPFileSystemFix,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   M_WPFileSystemFix_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,M_WPFileSystemFix,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,M_WPFileSystemFix,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   M_WPFileSystemFix_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,M_WPFileSystemFix,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,M_WPFileSystemFix,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   M_WPFileSystemFix_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,M_WPFileSystemFix,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,M_WPFileSystemFix,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   M_WPFileSystemFix_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,M_WPFileSystemFix,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,M_WPFileSystemFix,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,M_WPFileSystemFix,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write a detailed description of this object
 *  and its current state.
 * 
 *  <level> indicates the nesting level for describing compound objects
 *  it must be greater than or equal to zero.  All lines in the
 *  description will be preceeded by <2*level> spaces.
 * 
 *  This routine only actually writes the data that concerns the object
 *  as a whole, such as class, and uses <somDumpSelfInt> to describe
 *  the object's current state.  This approach allows readable
 *  descriptions of compound objects to be constructed.
 * 
 *  Generally it is not necessary to override this method, if it is
 *  overriden it generally must be completely replaced.
 */
   SOM_ResolveD(this,M_WPFileSystemFix,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write in the current state of this object.
 *  Generally this method will need to be overridden.  When overriding
 *  it, begin by calling the parent class form of this method and then
 *  write in a description of your class's instance data. This will
 *  result in a description of all the object's instance data going
 *  from its root ancestor class to its specific class.
 */
   SOM_ResolveD(this,M_WPFileSystemFix,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* M_WPFileSystemFix */



#endif       /* SOM_M_WPFileSystemFix_xh */
