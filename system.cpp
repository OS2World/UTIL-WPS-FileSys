
/*
 *  This file was generated by the SOM Compiler.
 *  Generated using:
 *     SOM incremental update: 2.47
 */


/*
 *  This file was generated by the SOM Compiler and Emitter Framework.
 *  Generated using template emitter:
 *      SOM Emitter emitxtm: 2.23.1.9
 */

#ifndef SOM_Module_system_Source
#define SOM_Module_system_Source
#endif
#define WPSystemFix_Class_Source
#define M_WPSystemFix_Class_Source

#define _RETAIL /* to completely eliminate the ...MethodDebug(...) debugging output to SOMOutCharRoutine (default:stdout) */
#include "system.xih"

extern HMODULE g_hModule;


MRESULT EXPENTRY LVMPageHandler(HWND hwndDlg,ULONG msg,MPARAM mp1,MPARAM mp2)
{
   BOOL fEject=FALSE;

   switch(msg) {
      case WM_INITDLG:
         _WPSystemFix->wpclsQuerySetting("EjectRemovables",&fEject,sizeof(fEject));
         WinCheckButton(hwndDlg,ID_EJECTREMOVABLES,fEject);
         return (MRESULT)FALSE;
         break;
      case WM_CONTROL:
         if (SHORT1FROMMP(mp1) == ID_EJECTREMOVABLES && SHORT2FROMMP(mp1) == BN_CLICKED) {
            fEject = (BOOL)WinQueryButtonCheckstate(hwndDlg,ID_EJECTREMOVABLES);
            _WPSystemFix->wpclsSetSetting("EjectRemovables",&fEject);
         } /* endif */
         return (MRESULT)TRUE;
         break;
   
      default:
         return WinDefDlgProc(hwndDlg,msg,mp1,mp2);
   }
   return WinDefDlgProc(hwndDlg,msg,mp1,mp2);
}


SOM_Scope void SOMLINK somDefaultInit(WPSystemFix *somSelf, som3InitCtrl* ctrl)
{
    WPSystemFixData *somThis; /* set in BeginInitializer */
    somInitCtrl globalCtrl;
    somBooleanVector myMask;
    WPSystemFixMethodDebug("WPSystemFix","somDefaultInit");
    WPSystemFix_BeginInitializer_somDefaultInit;

    WPSystemFix_Init_WPSystem_somDefaultInit(somSelf, ctrl);

    /*
     * local WPSystemFix initialization code added by programmer
     */
}


SOM_Scope void SOMLINK somDestruct(WPSystemFix *somSelf, octet doFree, 
                                   som3DestructCtrl* ctrl)
{
    WPSystemFixData *somThis; /* set in BeginDestructor */
    somDestructCtrl globalCtrl;
    somBooleanVector myMask;
    WPSystemFixMethodDebug("WPSystemFix","somDestruct");
    WPSystemFix_BeginDestructor;

    /*
     * local WPSystemFix deinitialization code added by programmer
     */

    WPSystemFix_EndDestructor;
}


SOM_Scope BOOL  SOMLINK wpAddSettingsPages(WPSystemFix *somSelf, 
                                           HWND hwndNotebook)
{
    BOOL fRet;

    /* WPSystemFixData *somThis = WPSystemFixGetData(somSelf); */
    WPSystemFixMethodDebug("WPSystemFix","wpAddSettingsPages");

    WPClassManager *clsMgr = new WPClassManager;

    fRet = (WPSystemFix_parent_WPSystem_wpAddSettingsPages(somSelf, 
                                                           hwndNotebook));
    /*
     * we only want to add this new page to the System object
     * but we have to prevent this page from being added
     * to all those objects that are derived from WPSystem
     * like the various XWorkplace objects
     * therefore we only add the page for a replacement class
     * for WPSystem, like WPSystemFix for example
    */ 
    if (fRet && clsMgr && clsMgr->wpReplacementIsInEffect("WPSystem",somSelf->somGetClassName())) {
       PAGEINFO pageinfo;
       memset(&pageinfo,0,sizeof(pageinfo));
       pageinfo.cb                = sizeof(pageinfo);
       pageinfo.usPageStyleFlags  = BKA_MAJOR;
       pageinfo.usPageInsertFlags = BKA_FIRST;
       pageinfo.resid             = g_hModule;
       pageinfo.pszName           = "Removables";
       pageinfo.pfnwp             = LVMPageHandler;
       pageinfo.dlgid             = DID_LVMSETTINGS;
   
       somSelf->wpInsertSettingsPage(hwndNotebook,&pageinfo);

    } /* endif */

    if (clsMgr) {
       delete clsMgr;
    } /* endif */

    return fRet;
}


SOM_Scope BOOL  SOMLINK wpclsSetSetting(M_WPSystemFix *somSelf, 
                                        PSZ pszSetting, PVOID pValue)
{
    /* M_WPSystemFixData *somThis = M_WPSystemFixGetData(somSelf); */
    M_WPSystemFixMethodDebug("M_WPSystemFix","wpclsSetSetting");

    if (0 == strcmpi("EjectRemovables",pszSetting)) {
       return PrfWriteProfileData(HINI_USERPROFILE,"PM_ControlPanel","EjectRemovables",pValue,sizeof(BOOL));
    } else {
       return (M_WPSystemFix_parent_M_WPSystem_wpclsSetSetting(somSelf, 
                                                               pszSetting, 
                                                               pValue));
    }
}

SOM_Scope ULONG  SOMLINK wpclsQuerySetting(M_WPSystemFix *somSelf, 
                                           PSZ pszSetting, PVOID pValue, 
                                           ULONG ulValueLen)
{
    /* M_WPSystemFixData *somThis = M_WPSystemFixGetData(somSelf); */
    M_WPSystemFixMethodDebug("M_WPSystemFix","wpclsQuerySetting");

    if (0 == strcmpi("EjectRemovables",pszSetting)) {
       if (pValue && (ulValueLen == sizeof(BOOL))) {
          ULONG ulMax = ulValueLen;
          if (!PrfQueryProfileData(HINI_USERPROFILE,"PM_ControlPanel","EjectRemovables",pValue,&ulMax)) {
             *(PBOOL)pValue = FALSE;
          }
          return ulMax;
       } else {
          return 0;
       } /* endif */
    } else {
       return (M_WPSystemFix_parent_M_WPSystem_wpclsQuerySetting(somSelf, 
                                                                 pszSetting, 
                                                                 pValue, 
                                                                 ulValueLen));
   }
}

